name: Security & Vulnerability Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - basic
          - dependencies-only

permissions:
  contents: read
  security-events: write
  actions: read
  issues: write
  pull-requests: write

jobs:
  python-security:
    name: üêç Python Security Bundle
    runs-on: ubuntu-latest
    outputs:
      bandit: ${{ steps.bandit.outputs.status }}
      safety: ${{ steps.safety.outputs.status }}
      osv: ${{ steps.osv-status.outputs.status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.10'

      - name: Install security tooling
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit[toml] safety

      - name: Run Bandit Security Scan
        id: bandit
        run: |
          set +e
          bandit -r . -x ./.venv -f sarif -o bandit-results.sarif
          exit_code=$?
          set -e
          if [ $exit_code -ne 0 ]; then
            echo "status=failed" >> "$GITHUB_OUTPUT"
          else
            echo "status=passed" >> "$GITHUB_OUTPUT"
          fi
          if [ ! -s bandit-results.sarif ]; then
            cat <<'EOF2' > bandit-results.sarif
{"version":"2.1.0","$schema":"https://json.schemastore.org/sarif-2.1.0.json","runs":[{"tool":{"driver":{"name":"Bandit","version":"1.8.6"}},"results":[]}]} 
EOF2
          fi
          exit 0

      - name: Run Safety Check
        id: safety
        run: |
          safety scan --sarif --output safety-results.sarif || true
          if [ -s safety-results.sarif ]; then
            echo "status=passed" >> "$GITHUB_OUTPUT"
          else
            echo "status=failed" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload Safety Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: safety-scan-results
          path: safety-results.sarif

      - name: Run OSV scan (SARIF)
        id: osv-sarif
        uses: google/osv-scanner-action@v1
        with:
          scan-args: |-
            --format sarif
            --output osv-results.sarif
            .
        continue-on-error: true

      - name: Determine OSV status
        id: osv-status
        run: |
          if [ -f osv-results.sarif ]; then
            echo "status=passed" >> "$GITHUB_OUTPUT"
          else
            echo "status=failed" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload Bandit SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: bandit-results.sarif
          category: bandit

      - name: Upload Safety SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: safety-results.sarif
          category: safety

      - name: Upload OSV SARIF results to Security tab
        if: ${{ always() && steps.osv-status.outputs.status == 'passed' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: osv-results.sarif
          category: osv-scanner

  semgrep-scan:
    name: üî¨ Semgrep Security Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == null
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Run Semgrep
        id: semgrep
        uses: semgrep/semgrep-action@v2
        with:
          config: >-
            p/security-audit
            p/secrets
            p/python
            p/owasp-top-ten
            p/cwe-top-25
          generateSarif: "true"

      - name: Upload Semgrep SARIF results to Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif
          category: semgrep

  codeql-analysis:
    name: üî¨ CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: ['python']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  dependency-review:
    name: üìã Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high
          allow-licenses: MIT, BSD-2-Clause, BSD-3-Clause, Apache-2.0, ISC, LGPL-2.1, LGPL-3.0
          deny-licenses: GPL-2.0, GPL-3.0, AGPL-1.0, AGPL-3.0

  prowler-github:
    name: üîê GitHub CIS Benchmark
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    outputs:
      enabled: ${{ steps.token_check.outputs.enabled }}
    steps:
      - name: Check for Prowler token
        id: token_check
        run: |
          if [ -z "${PROWLER_GITHUB_TOKEN}" ]; then
            echo "enabled=false" >> "$GITHUB_OUTPUT"
            echo "Skipping GitHub CIS scan: configure PROWLER_GITHUB_TOKEN secret to enable."
          else
            echo "enabled=true" >> "$GITHUB_OUTPUT"
          fi
        env:
          PROWLER_GITHUB_TOKEN: ${{ secrets.PROWLER_GITHUB_TOKEN }}

      - name: Checkout repository
        if: steps.token_check.outputs.enabled == 'true'
        uses: actions/checkout@v5

      - name: Set up Python
        if: steps.token_check.outputs.enabled == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.10'

      - name: Install Prowler
        if: steps.token_check.outputs.enabled == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install prowler

      - name: Run Prowler GitHub CIS benchmark
        if: steps.token_check.outputs.enabled == 'true'
        env:
          PROWLER_GITHUB_TOKEN: ${{ secrets.PROWLER_GITHUB_TOKEN }}
          GITHUB_ORG: ${{ github.repository_owner }}
          GITHUB_REPO: ${{ github.repository }}
        run: |
          mkdir -p prowler-output
          prowler github --compliance cis_1.0_github -M json,sarif -o prowler-output --no-banner

      - name: Collect Prowler outputs
        if: steps.token_check.outputs.enabled == 'true'
        id: prowler_outputs
        run: |
          JSON_REPORT=$(find prowler-output -name '*.json' -print -quit)
          SARIF_REPORT=$(find prowler-output -name '*.sarif' -print -quit)
          if [ -z "$JSON_REPORT" ] || [ -z "$SARIF_REPORT" ]; then
            echo "Prowler outputs not found" >&2
            exit 1
          fi
          echo "json=$JSON_REPORT" >> "$GITHUB_OUTPUT"
          echo "sarif=$SARIF_REPORT" >> "$GITHUB_OUTPUT"

      - name: Upload Prowler SARIF
        if: steps.token_check.outputs.enabled == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.prowler_outputs.outputs.sarif }}
          category: prowler-github

      - name: Upload Prowler artifact
        if: steps.token_check.outputs.enabled == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: prowler-github-cis-report
          path: ${{ steps.prowler_outputs.outputs.json }}

  yamllint:
    name: üìù YAML Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Yaml-lint
        uses: ibiqlik/action-yamllint@v3

  trufflehog:
    name: üê∑ TruffleHog Secret Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: TruffleHog
        uses: trufflesecurity/trufflehog@v3.82.2
        with:
          path: ./
          base: ${{ github.event.before }}
          head: ${{ github.event.after }}
          extra_args: --only-verified --fail

  security-summary:
    name: üìä Security Analysis Summary
    runs-on: ubuntu-latest
    needs: [python-security, semgrep-scan, codeql-analysis, dependency-review, prowler-github, yamllint, trufflehog]
    if: always()
    permissions:
      contents: read
      issues: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Generate Security Summary
        env:
          BANDIT_STATUS: ${{ needs.python-security.outputs.bandit }}
          SAFETY_STATUS: ${{ needs.python-security.outputs.safety }}
          OSV_STATUS: ${{ needs.python-security.outputs.osv }}
          SEMGREP_RESULT: ${{ needs.semgrep-scan.result }}
          CODEQL_RESULT: ${{ needs.codeql-analysis.result }}
          DEP_REVIEW_RESULT: ${{ needs.dependency-review.result }}
          PROWLER_ENABLED: ${{ needs.prowler-github.outputs.enabled }}
          PROWLER_RESULT: ${{ needs.prowler-github.result }}
          YAMLLINT_RESULT: ${{ needs.yamllint.result }}
          TRUFFLEHOG_RESULT: ${{ needs.trufflehog.result }}
        run: |
          status_emoji() {
            case "$1" in
              passed|success|succeeded) echo "‚úÖ" ;;
              failed|failure) echo "‚ùå" ;;
              skipped) echo "‚ö™" ;;
              *) echo "‚ö†Ô∏è" ;;
            esac
          }

          BANDIT_MARK=$(status_emoji "$BANDIT_STATUS")
          SAFETY_MARK=$(status_emoji "$SAFETY_STATUS")
          OSV_MARK=$(status_emoji "$OSV_STATUS")
          SEMGREP_MARK=$(status_emoji "$SEMGREP_RESULT")
          CODEQL_MARK=$(status_emoji "$CODEQL_RESULT")
          YAMLLINT_MARK=$(status_emoji "$YAMLLINT_RESULT")
          TRUFFLEHOG_MARK=$(status_emoji "$TRUFFLEHOG_RESULT")
          if [ "$PROWLER_ENABLED" = "true" ]; then
            PROWLER_MARK=$(status_emoji "$PROWLER_RESULT")
            PROWLER_DESC="CIS 1.0 benchmark (prowler github)"
          else
            PROWLER_MARK="‚ö™"
            PROWLER_RESULT="skipped"
            PROWLER_DESC="Configure PROWLER_GITHUB_TOKEN to enable"
          fi

          cat <<'EOF2' > security-summary.md
# üîí Security Analysis Summary

## üìä Scan Results

| Tool | Status | Integration | Description |
|------|--------|-------------|-------------|
EOF2
          cat <<EOF2 >> security-summary.md
| üîç Bandit | $BANDIT_MARK ${BANDIT_STATUS:-unknown} | ‚úÖ Security Tab | Python static analysis (SARIF) |
| üîí Safety | $SAFETY_MARK ${SAFETY_STATUS:-unknown} | ‚úÖ Security Tab | Dependency vulnerability scan |
| üõ°Ô∏è OSV Scanner | $OSV_MARK ${OSV_STATUS:-unknown} | ‚úÖ Security Tab | Open Source Vulnerability database |
| üî¨ Semgrep | $SEMGREP_MARK ${SEMGREP_RESULT} | ‚úÖ Security Tab | Multi-language security patterns |
| üß™ CodeQL | $CODEQL_MARK ${CODEQL_RESULT} | ‚úÖ Security Tab | GitHub's semantic code analysis |
| üìã Dependency Review | $(status_emoji "$DEP_REVIEW_RESULT") ${DEP_REVIEW_RESULT} | ‚úÖ Security Tab | License & vulnerability review |
| üõ°Ô∏è Prowler GitHub | $PROWLER_MARK ${PROWLER_RESULT} | ‚úÖ Security Tab | $PROWLER_DESC |
| üìù YAML Lint | $YAMLLINT_MARK ${YAMLLINT_RESULT} | ‚úÖ CI Logs | YAML syntax and style checking |
| üê∑ TruffleHog | $TRUFFLEHOG_MARK ${TRUFFLEHOG_RESULT} | ‚úÖ CI Logs | Secret scanning for verified secrets |

## üéØ Where to View Results

- **[Code scanning alerts](../../security/code-scanning)**
- **[Dependabot alerts](../../security/dependabot)**
- **[Secret scanning alerts](../../security/secret-scanning)**

## üöÄ Local Development

Run these commands locally to catch issues before commit:

```bash
# Comprehensive scan
scripts/enhanced-security-scan.sh

# Quick scan
scripts/local-security-scan.sh

# Individual tools
bandit -r . -x ./.venv
safety scan --json --output safety-results.json --project config/.safety-project.ini
osv-scanner --format json --output osv-results.json .
semgrep --config=auto .
yamllint .
trufflehog filesystem .
```

_This summary was generated automatically by the Security & Vulnerability Scanning workflow._
EOF2

      - name: Comment on PR with Security Summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            const marker = 'üîí Security Analysis Summary';
            const botComment = comments.data.find(comment =>
              comment.user.type === 'Bot' && comment.body.includes(marker)
            );
            if (botComment) {
              await github.rest.issues.updateComment({
                comment_id: botComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            }

      - name: Upload summary artifact
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md