name: Security & Vulnerability Scanning

on:
  push:
    branches: [main]
    paths:
      - '**/*.py'
      - 'requirements.txt'
      - '.github/workflows/security.yml'
      - 'Dockerfile'
      - 'pyproject.toml'
  pull_request:
    branches: [main, develop]
    paths:
      - '**/*.py'
      - 'requirements.txt'
      - '.github/workflows/security.yml'
      - 'Dockerfile'
      - 'pyproject.toml'
  schedule:
    - cron: '0 2 * * 1'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Security scans to execute'
        required: true
        default: full
        type: choice
        options:
          - full
          - basic
          - dependencies-only

env:
  RUN_OSV_SCANNER: 'true'

permissions:
  contents: read
  actions: read
  security-events: write

concurrency:
  group: security-${{ github.ref }}
  cancel-in-progress: true

jobs:
  python-security:
    name: Python Security Bundle
    runs-on: ubuntu-latest
    if: github.actor != 'dependabot[bot]'
    permissions:
      contents: read
      security-events: write
    outputs:
      bandit_status: ${{ steps.bandit.outcome }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Prepare Python
        uses: ./.github/actions/python-env
        with:
          install-deps: 'false'
          cache-dependency-path: requirements.txt

      - name: Install security tooling
        run: |
          python -m pip install --upgrade pip
          python -m pip install --no-deps bandit[toml] bandit-sarif-formatter
          python -m pip install -r requirements.txt

      - name: Run Bandit security scan
        id: bandit
        run: bandit -r . -x ./.venv -f sarif -o bandit-results.sarif || true

      - name: Upload Bandit SARIF
        if: always() && hashFiles('bandit-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: bandit-results.sarif
          category: bandit

  osv-scanner:
    permissions:
      actions: read
      contents: read
      security-events: write
    uses: google/osv-scanner-action/.github/workflows/osv-scanner-reusable.yml@v2.2.3
    with:
      fail-on-vuln: false
      upload-sarif: true

  opengrep:
    name: OpenGrep Static Analysis
    runs-on: ubuntu-latest
    if: |
      github.actor != 'dependabot[bot]' &&
      (github.event_name != 'workflow_dispatch' ||
       github.event.inputs.scan_type != 'dependencies-only')
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install OpenGrep
        run: curl -fsSL https://raw.githubusercontent.com/opengrep/opengrep/main/install.sh | bash

      - name: Add OpenGrep to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Run OpenGrep scan
        continue-on-error: true
        run: |
          $HOME/.local/bin/opengrep --sarif --output opengrep-results.sarif --config auto . || echo "OpenGrep scan completed with findings"

      - name: Upload OpenGrep SARIF
        if: always() && hashFiles('opengrep-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: opengrep-results.sarif
          category: opengrep

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    if: |
      github.actor != 'dependabot[bot]' &&
      (github.event_name == 'schedule' ||
       github.event_name == 'workflow_dispatch' ||
       github.event_name == 'push' && github.ref == 'refs/heads/main')
    permissions:
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: ['python']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"


  yamllint:
    name: YAML Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Run yamllint
        uses: ibiqlik/action-yamllint@v3
        with:
          config_file: config/.yamllint.yml

  trufflehog:
    name: TruffleHog Secret Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.actor != 'dependabot[bot]'
    permissions:
      contents: read
      id-token: write
      actions: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Run TruffleHog scan
        continue-on-error: true
        id: trufflehog
        run: |
          # Download and run TruffleHog with JSON output
          curl -sSfL https://github.com/trufflesecurity/trufflehog/releases/download/v3.90.8/trufflehog_3.90.8_linux_amd64.tar.gz | tar -xz
          ./trufflehog git file://. --json --only-verified > trufflehog-results.json || true

      - name: Convert TruffleHog JSON to SARIF
        if: always() && hashFiles('trufflehog-results.json') != ''
        run: |
          python3 << 'PYTHON_SCRIPT'
          import json
          import os
          from datetime import datetime

          # Read TruffleHog JSON results
          results = []
          try:
              with open('trufflehog-results.json', 'r') as f:
                  for line in f:
                      line = line.strip()
                      if line:
                          results.append(json.loads(line))
          except Exception as e:
              print(f"No results to convert: {e}")
              results = []

          # Create SARIF structure
          sarif = {
              "version": "2.1.0",
              "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
              "runs": [{
                  "tool": {
                      "driver": {
                          "name": "TruffleHog",
                          "version": "3.90.8",
                          "informationUri": "https://github.com/trufflesecurity/trufflehog",
                          "rules": []
                      }
                  },
                  "results": []
              }]
          }

          # Convert each finding
          rule_ids = set()
          for finding in results:
              detector_name = finding.get('DetectorName', 'Unknown')
              rule_id = f"trufflehog/{detector_name}"

              # Add rule if not seen before
              if rule_id not in rule_ids:
                  rule_ids.add(rule_id)
                  sarif["runs"][0]["tool"]["driver"]["rules"].append({
                      "id": rule_id,
                      "name": detector_name,
                      "shortDescription": {
                          "text": f"Detected {detector_name} secret"
                      },
                      "fullDescription": {
                          "text": f"TruffleHog detected a {detector_name} secret in the repository"
                      },
                      "help": {
                          "text": "Remove or rotate this secret immediately."
                      },
                      "defaultConfiguration": {
                          "level": "error"
                      },
                      "properties": {
                          "tags": ["security", "secret"]
                      }
                  })

              # Add result
              source_metadata = finding.get('SourceMetadata', {})
              file_path = source_metadata.get('Data', {}).get('Filesystem', {}).get('file', 'unknown')

              sarif["runs"][0]["results"].append({
                  "ruleId": rule_id,
                  "message": {
                      "text": f"Detected {detector_name} secret"
                  },
                  "level": "error",
                  "locations": [{
                      "physicalLocation": {
                          "artifactLocation": {
                              "uri": file_path
                          }
                      }
                  }]
              })

          # Write SARIF file
          with open('trufflehog-results.sarif', 'w') as f:
              json.dump(sarif, f, indent=2)

          print(f"Converted {len(results)} TruffleHog findings to SARIF")
          PYTHON_SCRIPT

      - name: Upload TruffleHog SARIF
        if: always() && hashFiles('trufflehog-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trufflehog-results.sarif
          category: trufflehog
