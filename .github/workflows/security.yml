name: Security & Vulnerability Scanning

on:
  push:
    branches: [main, develop]
    paths:
      - '**/*.py'
      - 'requirements.txt'
      - '.github/workflows/security.yml'
      - 'Dockerfile'
      - 'pyproject.toml'
  pull_request:
    branches: [main, develop]
    paths:
      - '**/*.py'
      - 'requirements.txt'
      - '.github/workflows/security.yml'
      - 'Dockerfile'
      - 'pyproject.toml'
  schedule:
    - cron: '0 2 * * 1'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Security scans to execute'
        required: true
        default: full
        type: choice
        options:
          - full
          - basic
          - dependencies-only

env:
  RUN_OSV_SCANNER: 'true'

permissions:
  contents: read
  actions: read
  security-events: write

concurrency:
  group: security-${{ github.ref }}
  cancel-in-progress: true

jobs:
  python-security:
    name: Python Security Bundle
    runs-on: ubuntu-latest
    if: github.actor != 'dependabot[bot]'
    permissions:
      contents: read
      security-events: write
    outputs:
      bandit_status: ${{ steps.bandit.outcome }}
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Prepare Python
        uses: ./.github/actions/python-env
        with:
          install-deps: 'false'
          cache-dependency-path: requirements.txt

      - name: Install security tooling
        run: |
          python -m pip install --upgrade pip
          python -m pip install --no-deps bandit[toml] bandit-sarif-formatter
          python -m pip install -r requirements.txt

      - name: Run Bandit security scan
        id: bandit
        run: bandit -r . -x ./.venv -f sarif -o bandit-results.sarif || true

      - name: Upload Bandit SARIF
        if: always() && hashFiles('bandit-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@80cb6b56b93de3e779c7d476d9100d06fb87c877
        with:
          sarif_file: bandit-results.sarif
          category: bandit

  osv-scanner:
    if: env.RUN_OSV_SCANNER == 'true'
    uses: google/osv-scanner-action/.github/workflows/osv-scanner-reusable.yml@90b209d0ea55cea1da9fc0c4e65782cc6acb6e2e

  opengrep-scan:
    name: OpenGrep
    runs-on: ubuntu-latest
    if: >-
      github.actor != 'dependabot[bot]' &&
      (
        github.event_name != 'workflow_dispatch' ||
        github.event.inputs.scan_type != 'dependencies-only'
      )
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          persist-credentials: false

      - name: Install OpenGrep
        run: python -m pip install opengrep

      - name: Run OpenGrep scan
        run: opengrep scan --format sarif --output opengrep-results.sarif .

      - name: Upload OpenGrep SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@80cb6b56b93de3e779c7d476d9100d06fb87c877
        with:
          sarif_file: opengrep-results.sarif
          category: opengrep

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    if: github.actor != 'dependabot[bot]'
    permissions:
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: ['python']
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          persist-credentials: false

      - name: Initialize CodeQL
        uses: github/codeql-action/init@80cb6b56b93de3e779c7d476d9100d06fb87c877
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@80cb6b56b93de3e779c7d476d9100d06fb87c877

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@80cb6b56b93de3e779c7d476d9100d06fb87c877
        with:
          category: "/language:${{ matrix.language }}"

  prowler-github:
    name: GitHub CIS Benchmark
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    outputs:
      enabled: ${{ steps.token_check.outputs.enabled }}
      result: ${{ steps.prowler.outcome }}
    steps:
      - name: Check for Prowler token
        id: token_check
        run: |
          if [ -z "${PROWLER_GITHUB_TOKEN}" ]; then
            echo "enabled=false" >> "$GITHUB_OUTPUT"
            echo "Skipping GitHub CIS scan: configure PROWLER_GITHUB_TOKEN to enable."
          else
            echo "enabled=true" >> "$GITHUB_OUTPUT"
          fi
        env:
          PROWLER_GITHUB_TOKEN: ${{ secrets.PROWLER_GITHUB_TOKEN }}

      - name: Checkout repository
        if: steps.token_check.outputs.enabled == 'true'
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          persist-credentials: false

      - name: Prepare Python
        if: steps.token_check.outputs.enabled == 'true'
        uses: ./.github/actions/python-env
        with:
          install-deps: 'false'

      - name: Install Prowler
        if: steps.token_check.outputs.enabled == 'true'
        run: |
          python -m pip install --upgrade pip
          python -m pip install --no-cache-dir --timeout 300 prowler

      - name: Run Prowler GitHub CIS benchmark
        id: prowler
        if: steps.token_check.outputs.enabled == 'true'
        env:
          GITHUB_PERSONAL_ACCESS_TOKEN: ${{ secrets.PROWLER_GITHUB_TOKEN }}
        run: |
          mkdir -p prowler-output
          prowler github \
            --repository ${{ github.repository }} \
            --compliance cis_1.0_github \
            --output-formats json-ocsf \
            --output-directory prowler-output \
            --ignore-exit-code-3

          json_file=$(find prowler-output -type f -name '*.ocsf.json' | head -n 1)
          csv_file=$(find prowler-output -type f -name '*.csv' | head -n 1)
          sarif_path="prowler-output/prowler-results.sarif"

          if [ -n "$json_file" ]; then
            python3 scripts/convert_prowler_json_to_sarif.py "$json_file" "$sarif_path"
            echo "sarif_file=$sarif_path" >> "$GITHUB_OUTPUT"
          elif [ -n "$csv_file" ]; then
            python3 scripts/convert_prowler_csv_to_sarif.py "$csv_file" "$sarif_path"
            echo "sarif_file=$sarif_path" >> "$GITHUB_OUTPUT"
          else
            echo "sarif_file=" >> "$GITHUB_OUTPUT"
            echo "Prowler output not found" >&2
            ls -la prowler-output/
          fi

      - name: Upload Prowler SARIF
        if: >-
          steps.token_check.outputs.enabled == 'true' &&
          steps.prowler.outputs.sarif_file != ''
        uses: github/codeql-action/upload-sarif@80cb6b56b93de3e779c7d476d9100d06fb87c877
        with:
          sarif_file: ${{ steps.prowler.outputs.sarif_file }}
          category: prowler-github

  yamllint:
    name: YAML Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          persist-credentials: false

      - name: Run yamllint
        uses: ibiqlik/action-yamllint@2576378a8e339169678f9939646ee3ee325e845c
        with:
          config_file: config/.yamllint.yml

  trufflehog:
    name: TruffleHog Secret Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.actor != 'dependabot[bot]'
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Run Trufflehog
        uses: trufflesecurity/trufflehog@466da5b0bb161144f6afca9afe5d57975828c410
        with:
          path: ./
          base: ${{ github.event.pull_request.base.sha || github.event.before }}
          head: ${{ github.event.pull_request.head.sha || github.event.after }}
          extra_args: --only-verified
