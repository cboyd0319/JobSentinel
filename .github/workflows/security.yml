name: Security & Vulnerability Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run comprehensive security scan daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - basic
          - dependencies-only

permissions:
  contents: read
  security-events: write
  actions: read
  issues: write
  pull-requests: write

jobs:
  bandit-scan:
    name: üîç Bandit Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.10'

      - name: Install Bandit
        run: pip install bandit[toml]

      - name: Run Bandit Security Scan
        run: |
          bandit -r . -x ./.venv -f sarif -o bandit-results.sarif || echo "Bandit completed with warnings"
          # Ensure SARIF file exists even if bandit fails
          if [ ! -f bandit-results.sarif ]; then
            echo '{"version":"2.1.0","$schema":"https://docs.oasis-open.org/sarif/sarif/v2.1.0/' \
              'errata01/os/schemas/sarif-schema-2.1.0.json","runs":[{"tool":{"driver":' \
              '{"name":"Bandit","version":"1.8.6"}},"results":[]}]}' > bandit-results.sarif
          fi

      - name: Upload Bandit SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: bandit-results.sarif
          category: bandit

  safety-scan:
    name: üîí Safety Dependency Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.10'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install safety

      - name: Run Safety Check
        env:
          SAFETY_API_KEY: ${{ secrets.SAFETY_API_KEY }}
        run: |
          # Run Safety with API key and blocking policy
          # Block on Critical, High, Medium issues that have fixes
          # Allow unfixed or unknown severity issues to pass

          echo "Running Safety scan with blocking policy..."
          echo "Policy: Block Critical/High/Medium issues WITH fixes available"
          echo "Policy: Allow unfixed or unknown severity issues"

          # Run safety scan and capture exit code
          SAFETY_PROJECT_ARGS=""
          if [ -f config/.safety-project.ini ]; then
            SAFETY_PROJECT_ARGS="--project config/.safety-project.ini"
          fi

          set +e
          if safety --help 2>/dev/null | grep -q "scan"; then
            safety scan --json --output safety-report.json $SAFETY_PROJECT_ARGS 2>&1
          else
            safety check --json $SAFETY_PROJECT_ARGS > safety-report.json 2>&1
          fi
          SAFETY_EXIT_CODE=$?
          set -e

          # Ensure JSON file exists even if safety fails
          if [ ! -f safety-report.json ]; then
            echo '{"vulnerabilities":[],"scan_id":"ci-scan",' \
              '"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}' > safety-report.json
          fi

          # Process results and apply blocking policy
          python3 << 'EOF'
          import json
          import sys
          import os

          try:
              with open('safety-report.json', 'r') as f:
                  data = json.load(f)

              vulnerabilities = data.get('vulnerabilities', [])
              should_block = False
              blocked_count = 0
              allowed_count = 0

              print(f"\nüìä Safety Scan Results: {len(vulnerabilities)} vulnerabilities found")

              for vuln in vulnerabilities:
                  severity = vuln.get('severity', 'unknown').lower()
                  has_fix = vuln.get('fix_available', False) or vuln.get('patched_versions', [])
                  pkg_name = vuln.get('package_name', 'unknown')
                  vuln_id = vuln.get('vulnerability_id', 'unknown')

                  # Apply blocking policy
                  if severity in ['critical', 'high', 'medium'] and has_fix:
                      print(f"üö´ BLOCKING: {pkg_name} - {vuln_id} ({severity.upper()}) - Fix available")
                      should_block = True
                      blocked_count += 1
                  else:
                      reason = "no fix available" if not has_fix else "severity below threshold"
                      print(f"‚úÖ ALLOWED: {pkg_name} - {vuln_id} ({severity.upper()}) - {reason}")
                      allowed_count += 1

              print(f"\nüìã Summary:")
              print(f"  üö´ Blocked (fixable Critical/High/Medium): {blocked_count}")
              print(f"  ‚úÖ Allowed (unfixed or Low severity): {allowed_count}")

              if should_block:
                  print(f"\n‚ùå FAILING BUILD: {blocked_count} fixable vulnerabilities found")
                  print("Fix these vulnerabilities by updating dependencies:")
                  for vuln in vulnerabilities:
                      severity = vuln.get('severity', 'unknown').lower()
                      has_fix = vuln.get('fix_available', False) or vuln.get('patched_versions', [])
                      if severity in ['critical', 'high', 'medium'] and has_fix:
                          pkg_name = vuln.get('package_name', 'unknown')
                          current_version = vuln.get('analyzed_version', 'unknown')
                          patched_versions = vuln.get('patched_versions', [])
                          if patched_versions:
                              print(f"  pip install {pkg_name}>={patched_versions[0]}")
                          else:
                              print(f"  pip install --upgrade {pkg_name}")
                  sys.exit(1)
              else:
                  print(f"\n‚úÖ PASSING: No blocking vulnerabilities found")

          except Exception as e:
              print(f"Error processing Safety results: {e}")
              # Don't fail on processing errors
          EOF

      - name: Upload Safety Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: safety-scan-results
          path: safety-report.json

  codeql-analysis:
    name: üî¨ CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ['python']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  osv-scanner:
    name: üõ°Ô∏è OSV Vulnerability Scanner
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type != 'basic'
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install OSV Scanner
        run: |
          curl -sSL https://github.com/google/osv-scanner/releases/download/v1.9.0/osv-scanner_1.9.0_linux_amd64.tar.gz -o osv-scanner.tar.gz
          tar -xzf osv-scanner.tar.gz osv-scanner
          chmod +x osv-scanner
          mkdir -p "$HOME/.local/bin"
          mv osv-scanner "$HOME/.local/bin/osv-scanner"
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Run OSV scan (JSON)
        continue-on-error: true
        run: |
          osv-scanner --format json --output osv-results.json .

      - name: Run OSV scan (SARIF)
        continue-on-error: true
        run: |
          osv-scanner --format sarif --output osv-results.sarif .

      - name: Upload OSV SARIF results to Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: osv-results.sarif
          category: osv-scanner

  semgrep-scan:
    name: üî¨ Semgrep Security Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == null
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Run Semgrep
        id: semgrep
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/python
            p/owasp-top-ten
            p/cwe-top-25
          generateSarif: "1"
        continue-on-error: true

      - name: Upload Semgrep SARIF results to Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif
          category: semgrep

  enhanced-safety-scan:
    name: üîê Enhanced Safety & SARIF Upload
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run Safety scan with SARIF conversion
        env:
          SAFETY_API_KEY: ${{ secrets.SAFETY_API_KEY }}
        run: |
          # Generate JSON output for conversion to SARIF with blocking policy
          echo "Running Safety scan with API key and blocking policy..."

          SAFETY_PROJECT_ARGS=""
          if [ -f config/.safety-project.ini ]; then
            SAFETY_PROJECT_ARGS="--project config/.safety-project.ini"
          fi

          # Run safety scan and capture exit code
          set +e
          if safety --help 2>/dev/null | grep -q "scan"; then
            safety scan --json --output safety-results.json $SAFETY_PROJECT_ARGS 2>&1
          else
            safety check --json $SAFETY_PROJECT_ARGS > safety-results.json 2>&1
          fi
          SAFETY_EXIT_CODE=$?
          set -e

          # Ensure JSON file exists
          if [ ! -f safety-results.json ]; then
            echo '{"vulnerabilities": []}' > safety-results.json
          fi

          # Apply blocking policy (same as above but for enhanced scan)
          python3 << 'EOF'
          import json
          import sys

          try:
              with open('safety-results.json', 'r') as f:
                  data = json.load(f)

              # Handle both old and new Safety API response formats
              vulnerabilities = data if isinstance(data, list) else data.get('vulnerabilities', [])
              should_block = False
              blocked_count = 0

              for vuln in vulnerabilities:
                  severity = vuln.get('severity', 'unknown').lower()
                  has_fix = vuln.get('fix_available', False) or vuln.get('patched_versions', [])

                  if severity in ['critical', 'high', 'medium'] and has_fix:
                      should_block = True
                      blocked_count += 1

              if should_block:
                  print(f"‚ùå Safety found {blocked_count} fixable Critical/High/Medium vulnerabilities")
                  sys.exit(1)
              else:
                  print("‚úÖ Safety scan passed blocking policy")

          except Exception as e:
              print(f"Warning: Error processing Safety results: {e}")
              # Don't fail on processing errors, let SARIF upload continue
          EOF

          # Convert Safety results to SARIF format
          python3 << 'EOF'
          import json
          import os
          from datetime import datetime

          # Create SARIF structure for Safety results
          sarif_template = {
              "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
              "version": "2.1.0",
              "runs": [
                  {
                      "tool": {
                          "driver": {
                              "name": "Safety",
                              "version": "3.0.0",
                              "informationUri": "https://pyup.io/safety/",
                              "rules": []
                          }
                      },
                      "results": []
                  }
              ]
          }

          try:
              with open('safety-results.json', 'r') as f:
                  safety_raw = json.load(f)

              vulnerabilities = safety_raw if isinstance(safety_raw, list) else safety_raw.get('vulnerabilities', [])

              for vuln in vulnerabilities:
                  rule_id = vuln.get('vulnerability_id', 'SAFETY-UNKNOWN')
                  package_name = vuln.get('package_name', 'unknown')

                  # Add rule
                  rule = {
                      "id": rule_id,
                      "name": f"VulnerablePackage/{package_name}",
                      "shortDescription": {
                          "text": f"Vulnerable package: {package_name}"
                      },
                      "fullDescription": {
                          "text": vuln.get('advisory', 'No description available')
                      },
                      "defaultConfiguration": {
                          "level": "error"
                      },
                      "helpUri": f"https://pyup.io/vulnerabilities/{rule_id}/"
                  }
                  sarif_template["runs"][0]["tool"]["driver"]["rules"].append(rule)

                  # Add result
                  result = {
                      "ruleId": rule_id,
                      "ruleIndex": len(sarif_template["runs"][0]["tool"]["driver"]["rules"]) - 1,
                      "message": {
                          "text": f"Vulnerable package {package_name} {vuln.get('analyzed_version', '')} found. {vuln.get('advisory', '')}"
                      },
                      "level": "error",
                      "locations": [
                          {
                              "physicalLocation": {
                                  "artifactLocation": {
                                      "uri": "requirements.txt"
                                  },
                                  "region": {
                                      "startLine": 1,
                                      "startColumn": 1
                                  }
                              }
                          }
                      ]
                  }
                  sarif_template["runs"][0]["results"].append(result)

          except (FileNotFoundError, json.JSONDecodeError):
              # No vulnerabilities found or file doesn't exist
              pass

          # Write SARIF file
          with open('safety-results.sarif', 'w') as f:
              json.dump(sarif_template, f, indent=2)
          EOF

      - name: Upload Safety SARIF results to Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: safety-results.sarif
          category: safety

  prowler-github:
    name: üîê GitHub CIS Benchmark
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    outputs:
      enabled: ${{ steps.token_check.outputs.enabled }}
    steps:
      - name: Check for Prowler token
        id: token_check
        run: |
          if [ -z "${PROWLER_GITHUB_TOKEN}" ]; then
            echo "enabled=false" >> "$GITHUB_OUTPUT"
            echo "Skipping GitHub CIS scan: configure PROWLER_GITHUB_TOKEN secret to enable."
          else
            echo "enabled=true" >> "$GITHUB_OUTPUT"
          fi
        env:
          PROWLER_GITHUB_TOKEN: ${{ secrets.PROWLER_GITHUB_TOKEN }}

      - name: Checkout repository
        if: steps.token_check.outputs.enabled == 'true'
        uses: actions/checkout@v5

      - name: Set up Python
        if: steps.token_check.outputs.enabled == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.10'

      - name: Install Prowler
        if: steps.token_check.outputs.enabled == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install prowler

      - name: Run Prowler GitHub CIS benchmark
        if: steps.token_check.outputs.enabled == 'true'
        env:
          PROWLER_GITHUB_TOKEN: ${{ secrets.PROWLER_GITHUB_TOKEN }}
          GITHUB_ORG: ${{ github.repository_owner }}
          GITHUB_REPO: ${{ github.repository }}
        run: |
          mkdir -p prowler-output
          prowler github --compliance cis_1.0_github -M json,sarif -o prowler-output --no-banner

      - name: Collect Prowler outputs
        if: steps.token_check.outputs.enabled == 'true'
        id: prowler_outputs
        run: |
          JSON_REPORT=$(find prowler-output -name '*.json' -print -quit)
          SARIF_REPORT=$(find prowler-output -name '*.sarif' -print -quit)
          if [ -z "$JSON_REPORT" ] || [ -z "$SARIF_REPORT" ]; then
            echo "Prowler outputs not found" >&2
            exit 1
          fi
          echo "json=$JSON_REPORT" >> "$GITHUB_OUTPUT"
          echo "sarif=$SARIF_REPORT" >> "$GITHUB_OUTPUT"

      - name: Upload Prowler SARIF
        if: steps.token_check.outputs.enabled == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.prowler_outputs.outputs.sarif }}
          category: prowler-github

      - name: Upload Prowler artifact
        if: steps.token_check.outputs.enabled == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: prowler-github-cis-report
          path: ${{ steps.prowler_outputs.outputs.json }}

  dependency-review:
    name: üìã Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high
          allow-licenses: MIT, BSD-2-Clause, BSD-3-Clause, Apache-2.0, ISC, LGPL-2.1, LGPL-3.0
          deny-licenses: GPL-2.0, GPL-3.0, AGPL-1.0, AGPL-3.0

  security-summary:
    name: üìä Security Analysis Summary
    runs-on: ubuntu-latest
    needs: [bandit-scan, safety-scan, codeql-analysis, osv-scanner, semgrep-scan, enhanced-safety-scan, prowler-github]
    if: always()
    permissions:
      contents: read
      issues: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Generate Security Summary
        run: |
          echo "# üîí Security Analysis Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "## üìä Scan Results" >> security-summary.md
          echo "" >> security-summary.md
          echo "| Tool | Status | Integration | Description |" >> security-summary.md
          echo "|------|--------|-------------|-------------|" >> security-summary.md
          echo "| üî¨ CodeQL | ${{ needs.codeql-analysis.result }} | ‚úÖ Security Tab | GitHub's semantic code analysis |" >> security-summary.md
          echo "| üîç Bandit | ${{ needs.bandit-scan.result }} | ‚úÖ Security Tab | Python security linter (SARIF) |" >> security-summary.md
          echo "| üî¨ Semgrep | ${{ needs.semgrep-scan.result }} | ‚úÖ Security Tab | Multi-language security patterns |" >> security-summary.md
          echo "| üõ°Ô∏è OSV Scanner | ${{ needs.osv-scanner.result }} | ‚úÖ Security Tab | Open Source Vulnerability database |" >> security-summary.md
          echo "| üîê Safety | ${{ needs.enhanced-safety-scan.result }} | ‚úÖ Security Tab | Python dependency vulnerabilities |" >> security-summary.md
          echo "| üìã Dependency Review | ${{ needs.dependency-review.result }} | ‚úÖ Security Tab | License & vulnerability review |" >> security-summary.md
          if [ "${{ needs.prowler-github.outputs.enabled }}" = "true" ]; then
            echo "| üõ°Ô∏è Prowler GitHub | ${{ needs.prowler-github.result }} | ‚úÖ Security Tab | CIS 1.0 benchmark (prowler github) |" >> security-summary.md
          else
            echo "| üõ°Ô∏è Prowler GitHub | skipped | ‚ö™ Optional | Configure PROWLER_GITHUB_TOKEN to enable |" >> security-summary.md
          fi
          echo "" >> security-summary.md
          echo "## üéØ Where to View Results" >> security-summary.md
          echo "" >> security-summary.md
          echo "### [üìà Security Tab](../../security)" >> security-summary.md
          echo "All vulnerability findings are now integrated with GitHub's Security tab:" >> security-summary.md
          echo "" >> security-summary.md
          echo "- **[Code scanning alerts](../../security/code-scanning)**: Source code vulnerabilities" >> security-summary.md
          echo "- **[Dependabot alerts](../../security/dependabot)**: Dependency vulnerabilities" >> security-summary.md
          echo "- **[Secret scanning alerts](../../security/secret-scanning)**: Exposed secrets" >> security-summary.md
          echo "" >> security-summary.md
          echo "### üîß SARIF Integration Details" >> security-summary.md
          echo "" >> security-summary.md
          echo "The following tools upload SARIF results to GitHub Security:" >> security-summary.md
          echo "- **Bandit**: `bandit` category" >> security-summary.md
          echo "- **Semgrep**: `semgrep` category" >> security-summary.md
          echo "- **OSV Scanner**: `osv-scanner` category" >> security-summary.md
          echo "- **Safety**: `safety` category" >> security-summary.md
          echo "- **CodeQL**: `/language:python` category" >> security-summary.md
          echo "" >> security-summary.md
          echo "## üöÄ Local Development" >> security-summary.md
          echo "" >> security-summary.md
          echo "Run these commands locally to catch issues before commit:" >> security-summary.md
          echo "" >> security-summary.md
          echo "\`\`\`bash" >> security-summary.md
          echo "# Comprehensive scan" >> security-summary.md
          echo "scripts/enhanced-security-scan.sh" >> security-summary.md
          echo "" >> security-summary.md
          echo "# Quick scan" >> security-summary.md
          echo "scripts/local-security-scan.sh" >> security-summary.md
          echo "" >> security-summary.md
          echo "# Individual tools" >> security-summary.md
          echo "bandit -r . -x ./.venv" >> security-summary.md
          echo "safety scan --json --output safety-results.json --project config/.safety-project.ini" >> security-summary.md
          echo "osv-scanner ." >> security-summary.md
          echo "semgrep --config=auto ." >> security-summary.md
          echo "\`\`\`" >> security-summary.md
          echo "" >> security-summary.md
          echo "_This summary was generated automatically by the Security Analysis workflow._" >> security-summary.md

      - name: Comment on PR with Security Summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');

            // Find existing security summary comment
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const botComment = comments.data.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('üîí Security Analysis Summary')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                comment_id: botComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            }
