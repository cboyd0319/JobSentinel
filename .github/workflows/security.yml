name: Security & Vulnerability Scanning

"on":
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Security Scans'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - basic
          - dependencies-only

permissions:
  contents: read
  security-events: write
  actions: read
  issues: write
  pull-requests: write
  id-token: write  # Required for secure OIDC token access

concurrency:
  group: security-${{ github.ref }}
  cancel-in-progress: true

jobs:
  python-security:
    name: Python Security Bundle
    runs-on: ubuntu-latest
    if: github.actor != 'dependabot[bot]'
    outputs:
      bandit: ${{ steps.bandit.outcome }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.10'
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: Install security tooling
        run: |
          python -m pip install --upgrade pip
          pip install --no-deps bandit[toml] bandit-sarif-formatter
          pip install -r requirements.txt

      - name: Run Bandit Security Scan
        id: bandit
        run: bandit -r . -x ./.venv -f sarif -o bandit-results.sarif || true

      - name: Upload Bandit SARIF
        if: always() && hashFiles('bandit-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: bandit-results.sarif
          category: bandit

  osv-scanner:
    uses: google/osv-scanner-action/.github/workflows/osv-scanner-reusable.yml@v2.2.2

  semgrep-scan:
    name: semgrep/ci
    runs-on: ubuntu-latest
    if: >-
      (github.actor != 'dependabot[bot]') &&
      (github.event.inputs.scan_type == 'full' ||
       !github.event.inputs.scan_type)
    permissions:
      contents: read
      security-events: write
    env:
      SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
    container:
      image: semgrep/semgrep
    steps:
      - uses: actions/checkout@v5
      - run: semgrep scan --config auto --sarif --output semgrep-results.sarif .
      - name: Upload Semgrep SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep-results.sarif
          category: semgrep

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    if: github.actor != 'dependabot[bot]'
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: ['python']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          persist-credentials: false

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  prowler-github:
    name: GitHub CIS Benchmark
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    outputs:
      enabled: ${{ steps.token_check.outputs.enabled }}
    steps:
      - name: Check for Prowler token
        id: token_check
        run: |
          if [ -z "${PROWLER_GITHUB_TOKEN}" ]; then
            echo "enabled=false" >> "$GITHUB_OUTPUT"
            echo "Skipping GitHub CIS scan:" \
              "configure PROWLER_GITHUB_TOKEN secret to enable."
          else
            echo "enabled=true" >> "$GITHUB_OUTPUT"
          fi
        env:
          PROWLER_GITHUB_TOKEN: ${{ secrets.PROWLER_GITHUB_TOKEN }}

      - name: Checkout repository
        if: steps.token_check.outputs.enabled == 'true'
        uses: actions/checkout@v5
        with:
          persist-credentials: false

      - name: Set up Python
        if: steps.token_check.outputs.enabled == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.10'
          cache: 'pip'

      - name: Install Prowler
        if: steps.token_check.outputs.enabled == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install --no-cache-dir --timeout 300 prowler

      - name: Run Prowler GitHub CIS benchmark
        id: prowler
        if: steps.token_check.outputs.enabled == 'true'
        env:
          GITHUB_PERSONAL_ACCESS_TOKEN: ${{ secrets.PROWLER_GITHUB_TOKEN }}
        run: |
          mkdir -p prowler-output
          prowler github \
            --repository ${{ github.repository }} \
            --compliance cis_1.0_github \
            --output-formats json-ocsf \
            --output-directory prowler-output \
            --ignore-exit-code-3

          json_file=$(find prowler-output -type f \
            -name '*.ocsf.json' | head -n 1)
          csv_file=$(find prowler-output -type f -name '*.csv' | head -n 1)
          sarif_path="prowler-output/prowler-results.sarif"

          if [ -n "$json_file" ]; then
            echo "Found Prowler JSON-OCSF file: $json_file"
            python3.12 scripts/convert_prowler_json_to_sarif.py \
              "$json_file" "$sarif_path"
            echo "sarif_file=$sarif_path" >> "$GITHUB_OUTPUT"

            # Debug: Show conversion results
            if [ -f "$sarif_path" ]; then
              echo "SARIF file created successfully"
              python3.12 -c \
                "import os; print(f'Size: {os.path.getsize(\"$sarif_path\")}')"
            fi
          elif [ -n "$csv_file" ]; then
            echo "Fallback: Found Prowler CSV file: $csv_file"
            python3.12 scripts/convert_prowler_csv_to_sarif.py \
              "$csv_file" "$sarif_path"
            echo "sarif_file=$sarif_path" >> "$GITHUB_OUTPUT"
          else
            echo "sarif_file=" >> "$GITHUB_OUTPUT"
            echo "Prowler output not found" >&2
            echo "Available files in prowler-output:"
            ls -la prowler-output/
          fi

      - name: Upload Prowler SARIF
        if: >-
          steps.token_check.outputs.enabled == 'true' &&
          steps.prowler.outputs.sarif_file != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.prowler.outputs.sarif_file }}
          category: prowler-github


  yamllint:
    name: YAML Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          persist-credentials: false
      - name: Yaml-lint
        uses: ibiqlik/action-yamllint@v3
        with:
          config_file: config/.yamllint.yml

  trufflehog:
    name: TruffleHog Secret Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.actor != 'dependabot[bot]'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          persist-credentials: false
          fetch-depth: 0
      - name: TruffleHog
        uses: trufflesecurity/trufflehog@v3.90.8
        with:
          path: ./
          base: ${{ github.event.pull_request.base.sha || github.event.before }}
          head: ${{ github.event.pull_request.head.sha || github.event.after }}
          extra_args: --only-verified

  security-summary:
    name: Security Analysis Summary
    runs-on: ubuntu-latest
    needs: [
      python-security, osv-scanner, semgrep-scan, codeql-analysis,
      prowler-github, yamllint, trufflehog
    ]
    if: always()
    permissions:
      contents: read
      issues: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          persist-credentials: false

      - name: Generate Security Summary
        env:
          BANDIT_STATUS: ${{ needs.python-security.outputs.bandit }}
          OSV_RESULT: ${{ needs.osv-scanner.result }}
          SEMGREP_RESULT: ${{ needs.semgrep-scan.result }}
          CODEQL_RESULT: ${{ needs.codeql-analysis.result }}
          PROWLER_ENABLED: ${{ needs.prowler-github.outputs.enabled }}
          PROWLER_RESULT: ${{ needs.prowler-github.result }}
          YAMLLINT_RESULT: ${{ needs.yamllint.result }}
          TRUFFLEHOG_RESULT: ${{ needs.trufflehog.result }}
        run: ./scripts/generate-security-summary.sh

      - name: Comment on PR with Security Summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            const marker = 'Security Analysis Summary';
            const botComment = comments.data.find(comment =>
              comment.user.type === 'Bot' && comment.body.includes(marker)
            );
            if (botComment) {
              await github.rest.issues.updateComment({
                comment_id: botComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            }

      - name: Upload summary artifact
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md
