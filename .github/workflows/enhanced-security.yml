name: Enhanced Security & Code Quality Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run comprehensive security scans weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

permissions:
  contents: read
  security-events: write
  actions: read
  issues: write
  pull-requests: write

jobs:
  # Step-Security Harden Runner for enhanced security
  harden-runner:
    name: Harden CI Runner
    runs-on: ubuntu-latest
    outputs:
      continue: ${{ steps.harden.outputs.success }}
    steps:
    - name: Harden Runner
      id: harden
      uses: step-security/harden-runner@v2
      with:
        egress-policy: audit
        allowed-endpoints: >
          api.github.com:443
          github.com:443
          objects.githubusercontent.com:443
          pypi.org:443
          files.pythonhosted.org:443
          registry.npmjs.org:443

  # CodeQL Analysis - GitHub's semantic code analyzer
  codeql:
    name: 🔍 CodeQL Analysis
    runs-on: ubuntu-latest
    needs: harden-runner
    timeout-minutes: 15
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read
    strategy:
      fail-fast: false
      matrix:
        language: ['python']
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-and-quality

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  # OSV Scanner - Google's vulnerability database scanner
  osv-scan:
    needs: harden-runner
    name: 🛡️ OSV Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Run OSV Scanner
      uses: google/osv-scanner-action@v1
      with:
        scan-args: |-
          --format=sarif
          --output=osv-results.sarif
          .
      continue-on-error: true

    - name: Upload OSV scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: osv-results.sarif
        category: osv-vulnerabilities

  # TruffleHog - Secrets Detection
  secrets-scan:
    needs: harden-runner
    name: 🔑 Secrets Detection
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: >
          --debug --only-verified --format sarif 
          --output trufflehog-results.sarif

    - name: Upload TruffleHog results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: trufflehog-results.sarif
        category: secrets

  # Dependency Review - Check for vulnerable dependencies
  dependency-review:
    needs: harden-runner
    name: 📦 Dependency Vulnerability Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        allow-licenses: >
          MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC, 
          0BSD, Unlicense, WTFPL
        deny-licenses: GPL-2.0, GPL-3.0, AGPL-1.0, AGPL-3.0

  # Enhanced Python security scanning
  python-security:
    needs: harden-runner
    name: 🐍 Python Security Analysis
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install 'bandit[toml]' safety ruff

    - name: Run Bandit security linter (enhanced)
      run: |
        # Create bandit config for better scanning
        cat > bandit.yaml << 'EOF'
        exclude_dirs: ['./data', './venv', './.venv', './.git']
        skips: []  # Don't skip any tests by default
        tests: [
          'B101', 'B102', 'B103', 'B104', 'B105', 'B106', 'B107', 'B108',
          'B110', 'B112', 'B201', 'B301', 'B302', 'B303', 'B304', 'B305',
          'B306', 'B307', 'B308', 'B309', 'B310', 'B311', 'B312', 'B313',
          'B314', 'B315', 'B316', 'B317', 'B318', 'B319', 'B320', 'B321',
          'B322', 'B323', 'B324', 'B325', 'B501', 'B502', 'B503', 'B504',
          'B505', 'B506', 'B507', 'B601', 'B602', 'B603', 'B604', 'B605',
          'B606', 'B607', 'B608', 'B609', 'B610', 'B611', 'B701', 'B702',
          'B703'
        ]
        EOF
        
        # Run with SARIF output for Security tab
        bandit -r . -c bandit.yaml -f sarif -o bandit-results.sarif || true
        # Also create JSON for artifacts
        bandit -r . -c bandit.yaml -f json -o bandit-report.json || true

    - name: Upload Bandit results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: bandit-results.sarif
        category: python-security

    - name: Run Safety check for known vulnerabilities
      run: |
        # Use new safety scan command
        safety scan --json --output safety-report.json || true
        
        # Convert to SARIF for Security tab
        python3 << 'EOF'
import json
import sys

try:
    with open('safety-report.json', 'r') as f:
        safety_data = json.load(f)
    
    sarif = {
        'version': '2.1.0',
        'schema': 'https://docs.oasis-open.org/sarif/sarif/v2.1.0/errata01/os/schemas/sarif-schema-2.1.0.json',
        'runs': [{
            'tool': {
                'driver': {
                    'name': 'Safety',
                    'version': '3.0.0',
                    'informationUri': 'https://pyup.io/safety/',
                    'rules': []
                }
            },
            'results': []
        }]
    }
    
    vulnerabilities = safety_data.get('vulnerabilities', [])
    for vuln in vulnerabilities:
        result = {
            'ruleId': f"safety-{vuln.get('vulnerability_id', 'unknown')}",
            'message': {'text': f"Vulnerability in {vuln.get('package_name', 'unknown')}: {vuln.get('advisory', 'No details')}"},
            'level': 'warning',
            'locations': [{
                'physicalLocation': {
                    'artifactLocation': {'uri': 'requirements.txt'},
                    'region': {'startLine': 1, 'endLine': 1}
                }
            }]
        }
        sarif['runs'][0]['results'].append(result)
    
    with open('safety-results.sarif', 'w') as f:
        json.dump(sarif, f, indent=2)
        
except Exception as e:
    print(f"Error converting Safety results: {e}")
    # Create empty SARIF if conversion fails
    sarif = {
        'version': '2.1.0',
        'schema': 'https://docs.oasis-open.org/sarif/sarif/v2.1.0/errata01/os/schemas/sarif-schema-2.1.0.json',
        'runs': [{'tool': {'driver': {'name': 'Safety'}}, 'results': []}]
    }
    with open('safety-results.sarif', 'w') as f:
        json.dump(sarif, f)
EOF

    - name: Upload Safety results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: safety-results.sarif
        category: python-dependencies

    - name: Run Ruff linter (fast Python linter)
      run: |
        ruff check --output-format=sarif --output-file=ruff-results.sarif . || true

    - name: Upload Ruff results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: ruff-results.sarif
        category: python-linting

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: python-security-reports
        path: |
          bandit-report.json
          safety-report.json

  # YAML and configuration validation
  config-validation:
    needs: harden-runner
    name: 📝 Configuration Validation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install validation tools
      run: |
        pip install yamllint
        curl -L https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.x86_64.tar.xz | tar -xJ
        sudo cp shellcheck-stable/shellcheck /usr/local/bin/

    - name: Validate YAML files
      run: |
        # Create yamllint config
        cat > .yamllint.yml << 'EOF'
        extends: default
        rules:
          line-length:
            max: 120
            level: warning
          document-start:
            present: false
          truthy:
            allowed-values: ['true', 'false', 'on', 'off']
        EOF
        
        yamllint -c .yamllint.yml .github/workflows/ || true

    - name: Validate shell scripts
      run: |
        find . -name "*.sh" -type f -exec shellcheck {} \; || true

    - name: Validate JSON configuration files
      run: |
        find . -name "*.json" -type f -exec python -m json.tool {} \; > /dev/null || true

  # License compliance check
  license-check:
    needs: harden-runner
    name: 📋 License Compliance
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: License Scanner
      uses: fossa-contrib/fossa-action@v3
      with:
        api-key: ${{ secrets.FOSSA_API_KEY }}
        # Only run if FOSSA_API_KEY is available
      continue-on-error: true

  # Supply chain security - SLSA provenance
  provenance:
    needs: [secrets-scan, osv-scan, python-security, codeql]
    name: 🔗 Supply Chain Security
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Generate build provenance
      uses: actions/attest-build-provenance@v1
      with:
        subject-path: |
          agent.py
          database.py
          requirements.txt
          install.sh

  # Comprehensive security summary report
  security-summary:
    needs: [secrets-scan, dependency-review, osv-scan, python-security, codeql, config-validation, license-check]
    name: 📊 Security Summary
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Create security summary
      run: |
        echo "## 🛡️ Enhanced Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status | Details |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|---------|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| CodeQL Analysis | ${{ needs.codeql.result == 'success' && '✅ Pass' || '❌ Fail' }} | GitHub's semantic code analyzer |" >> $GITHUB_STEP_SUMMARY
        echo "| OSV Scanner | ${{ needs.osv-scan.result == 'success' && '✅ Pass' || '❌ Fail' }} | Google's vulnerability database |" >> $GITHUB_STEP_SUMMARY
        echo "| Secrets Scan | ${{ needs.secrets-scan.result == 'success' && '✅ Pass' || '❌ Fail' }} | TruffleHog secrets detection |" >> $GITHUB_STEP_SUMMARY
        echo "| Dependency Review | ${{ needs.dependency-review.result == 'success' && '✅ Pass' || (needs.dependency-review.result == 'skipped' && '⏭️ Skipped' || '❌ Fail') }} | Dependency vulnerability check |" >> $GITHUB_STEP_SUMMARY  
        echo "| Python Security | ${{ needs.python-security.result == 'success' && '✅ Pass' || '❌ Fail' }} | Bandit + Safety + Ruff analysis |" >> $GITHUB_STEP_SUMMARY
        echo "| Config Validation | ${{ needs.config-validation.result == 'success' && '✅ Pass' || '❌ Fail' }} | YAML + Shell + JSON validation |" >> $GITHUB_STEP_SUMMARY
        echo "| License Check | ${{ needs.license-check.result == 'success' && '✅ Pass' || (needs.license-check.result == 'skipped' && '⏭️ Skipped' || '❌ Fail') }} | License compliance |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔍 Security Tools Used" >> $GITHUB_STEP_SUMMARY
        echo "- **CodeQL**: Semantic code analysis (GitHub native)" >> $GITHUB_STEP_SUMMARY
        echo "- **OSV Scanner**: Google's comprehensive vulnerability database" >> $GITHUB_STEP_SUMMARY
        echo "- **TruffleHog**: Advanced secrets detection" >> $GITHUB_STEP_SUMMARY
        echo "- **Bandit**: Python security linter with enhanced rules" >> $GITHUB_STEP_SUMMARY
        echo "- **Safety**: Python dependency vulnerability scanner" >> $GITHUB_STEP_SUMMARY
        echo "- **Ruff**: Fast Python linter and code quality checker" >> $GITHUB_STEP_SUMMARY
        echo "- **ShellCheck**: Shell script analysis" >> $GITHUB_STEP_SUMMARY
        echo "- **yamllint**: YAML syntax and style validation" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📈 Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "- Review any failed checks above" >> $GITHUB_STEP_SUMMARY
        echo "- Check the **Security tab** for detailed vulnerability reports" >> $GITHUB_STEP_SUMMARY
        echo "- Download artifact reports for detailed analysis" >> $GITHUB_STEP_SUMMARY
        echo "- All security findings are uploaded in SARIF format for easy tracking" >> $GITHUB_STEP_SUMMARY