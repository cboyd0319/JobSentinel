name: 🔒 Enhanced Security Analysis

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 2 * * 0'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  comprehensive-security:
    name: 🔐 Comprehensive Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.10'

      - name: Install security tools
        run: |
          pip install bandit[toml] safety yamllint

      - name: Run Bandit (SAST)
        run: |
          bandit -r . -x ./.venv -f sarif -o bandit-results.sarif || echo "Bandit completed with warnings"
          # Ensure SARIF file exists even if bandit fails
          if [ ! -f bandit-results.sarif ]; then
            echo '{"version":"2.1.0","$schema":"https://docs.oasis-open.org/sarif/sarif/v2.1.0/' \
              'errata01/os/schemas/sarif-schema-2.1.0.json","runs":[{"tool":{"driver":' \
              '{"name":"Bandit","version":"1.8.6"}},"results":[]}]}' > bandit-results.sarif
          fi

      - name: Upload Bandit SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: bandit-results.sarif
          category: bandit

      - name: Run Safety (Dependencies)
        run: |
          pip install -r requirements.txt
          safety scan --json --output safety-report.json || echo "Safety completed with warnings"
          # Ensure JSON file exists even if safety fails
          if [ ! -f safety-report.json ]; then
            echo '{"vulnerabilities":[],"scan_id":"enhanced-ci-scan",' \
              '"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}' > safety-report.json
          fi

      - name: Upload Safety Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: enhanced-safety-results
          path: safety-report.json

      - name: YAML Lint Check
        run: |
          yamllint .github/workflows/ || true

      - name: Determine TruffleHog range
        id: trufflehog_refs
        shell: bash
        run: |
          if git rev-parse HEAD^ >/dev/null 2>&1; then
            echo "base=$(git rev-parse HEAD^)" >> "$GITHUB_OUTPUT"
            echo "skip=false" >> "$GITHUB_OUTPUT"
          else
            echo "skip=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Secret Scanning
        if: steps.trufflehog_refs.outputs.skip != 'true'
        uses: trufflesecurity/trufflehog@v3.82.2
        with:
          path: ./
          base: ${{ steps.trufflehog_refs.outputs.base }}
          head: HEAD
          extra_args: --only-verified
