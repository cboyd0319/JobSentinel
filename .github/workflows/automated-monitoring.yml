name: Automated Monitoring & Health Checks

on:
  schedule:
    - cron: '0 0,12 * * *'
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: monitoring-${{ github.ref }}
  cancel-in-progress: false

jobs:
  health-check:
    uses: ./.github/workflows/reusable-health-check.yml

  create-issue-on-failure:
    name: Create Issue on Failure
    runs-on: ubuntu-latest
    needs: health-check
    if: needs.health-check.outputs.status == 'critical'
    permissions:
      issues: write
    steps:
      - name: Download health report
        uses: actions/download-artifact@v4
        with:
          name: health-report-${{ github.run_number }}

      - name: Create Issue
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('health-report.txt', 'utf8');
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'CRITICAL: System health check failed',
              body: |-
                ## Critical Health Check Failure

                **Time**: ${new Date().toISOString()}
                **Workflow Run**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

                ### Health Report
                ```
                ${report}
                ```
              ,
              labels: ['critical', 'health-check', 'automated'],
              assignees: [context.repo.owner]
            });

  database-backup-check:
    name: Verify Database Backups
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' && vars.GCP_STORAGE_BUCKET != ''
    permissions:
      contents: read
      issues: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Prepare Python
        uses: ./.github/actions/python-env
        with:
          install-deps: 'false'

      - name: Install dependencies
        run: python -m pip install google-cloud-storage

      - name: Check backup recency
        continue-on-error: true
        env:
          STORAGE_BUCKET: ${{ secrets.GCP_STORAGE_BUCKET }}
          GOOGLE_APPLICATION_CREDENTIALS_JSON: ${{ secrets.GCP_SA_KEY }}
        run: |
          if [ -f "scripts/check_backup_recency.py" ]; then
            python scripts/check_backup_recency.py
          else
            echo "Backup check script not found, skipping"
            exit 0
          fi

      - name: Create issue if backups are stale
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Database backups are stale',
              body: |-
                No recent database backups were found in the last 48 hours.

                **Check Time**: ${new Date().toISOString()}

                ### Next steps
                1. Verify Cloud Scheduler is running.
                2. Check database sync logs.
                3. Manually trigger backup if required.
              ,
              labels: ['database', 'backup', 'automated'],
              assignees: [context.repo.owner]
            });

  performance-metrics:
    name: Track Performance Metrics
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Prepare Python environment
        uses: ./.github/actions/python-env
        with:
          install-deps: 'true'

      - name: Run performance benchmark
        continue-on-error: true
        run: |
          if [ -f "scripts/performance_benchmark.py" ]; then
            set -euo pipefail
            python scripts/performance_benchmark.py | tee perf-report.txt
          else
            echo "Performance benchmark script not found, skipping"
            echo "No benchmark available" > perf-report.txt
          fi

      - name: Upload performance report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-report-${{ github.run_number }}
          path: perf-report.txt
          retention-days: 1

      - name: Surface performance warnings
        if: failure()
        run: |
          echo 'Performance benchmark reported a failure. Review perf-report.txt for details.'
          exit 1
