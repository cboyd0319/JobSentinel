name: Automated Monitoring & Health Checks

on:
  schedule:
    # Run twice daily instead of every 6 hours (cost optimization)
    - cron: '0 0,12 * * *'
  workflow_dispatch:

permissions:
  contents: read
  issues: write

jobs:
  health-monitor:
    name: System Health Monitor
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'  # Latest stable
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run health check
        id: health
        run: |
          python -m src.agent --mode health > health-report.txt 2>&1 || true
          cat health-report.txt

          # Parse health status
          if grep -q "CRITICAL" health-report.txt; then
            echo "status=critical" >> "$GITHUB_OUTPUT"
          elif grep -q "WARNING" health-report.txt; then
            echo "status=warning" >> "$GITHUB_OUTPUT"
          else
            echo "status=ok" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload health report
        uses: actions/upload-artifact@v4
        with:
          name: health-report-${{ github.run_number }}
          path: health-report.txt

      - name: Create issue for critical status
        if: steps.health.outputs.status == 'critical'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('health-report.txt', 'utf8');

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® CRITICAL: System Health Check Failed',
              body: `## Critical Health Check Failure

              **Time**: ${new Date().toISOString()}
              **Run**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

              ### Health Report
              \`\`\`
              ${report}
              \`\`\`

              ### Recommended Actions
              1. Check database connectivity
              2. Verify cloud storage access
              3. Review recent deployments
              4. Check resource availability

              **This issue was automatically created by GitHub Actions**`,
              labels: ['critical', 'health-check', 'automated'],
              assignees: [context.repo.owner]
            });

  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'  # Latest stable

      - name: Run pip-audit check
        id: pip_audit
        run: |
          pip install pip-audit
          pip-audit --format json > pip-audit-report.json || true

          # pip-audit uses 'dependencies' array with 'vulns' sub-array
          VULN_COUNT=$(jq '[.dependencies[] | select(.vulns | length > 0)] | length' pip-audit-report.json 2>/dev/null || echo 0)
          echo "vuln_count=$VULN_COUNT" >> "$GITHUB_OUTPUT"

      - name: Create issue for vulnerabilities
        if: steps.pip_audit.outputs.vuln_count > 0
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const auditReport = JSON.parse(fs.readFileSync('pip-audit-report.json', 'utf8'));

            const vulns = auditReport.dependencies
              .filter(dep => dep.vulns && dep.vulns.length > 0)
              .flatMap(dep => dep.vulns.map(v =>
                `- **${dep.name}** (${dep.version}): ${v.id} - ${v.description || 'No description'}`
              ))
              .join('\n');

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '‚ö†Ô∏è Security: Vulnerable Dependencies Detected',
              body: `## Vulnerable Dependencies Found

              **Count**: ${{ steps.pip_audit.outputs.vuln_count }}
              **Scan Time**: ${new Date().toISOString()}
              **Scanner**: pip-audit (OSV Database)

              ### Vulnerabilities
              ${vulns}

              ### Action Required
              Run automated dependency update workflow or update manually.

              **Auto-generated by security monitoring**`,
              labels: ['security', 'dependencies', 'automated'],
              assignees: [context.repo.owner]
            });

  database-backup-check:
    name: Verify Database Backups
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'  # Latest stable

      - name: Install dependencies
        run: pip install google-cloud-storage

      - name: Check backup recency
        env:
          STORAGE_BUCKET: ${{ secrets.GCP_STORAGE_BUCKET }}
          GOOGLE_APPLICATION_CREDENTIALS_JSON: ${{ secrets.GCP_SA_KEY }}
        run: |
          python << 'EOF'
          import os
          import json
          from datetime import datetime, timezone, timedelta
          from google.cloud import storage
          from google.oauth2 import service_account

          # Skip if not configured
          if not os.getenv('STORAGE_BUCKET'):
              print("Cloud storage not configured - skipping")
              exit(0)

          # Load credentials
          creds_json = os.getenv('GOOGLE_APPLICATION_CREDENTIALS_JSON')
          credentials = service_account.Credentials.from_service_account_info(
              json.loads(creds_json)
          )

          client = storage.Client(credentials=credentials)
          bucket = client.bucket(os.getenv('STORAGE_BUCKET'))

          # Check for recent backups
          cutoff = datetime.now(timezone.utc) - timedelta(hours=48)
          recent_backups = []

          for blob in bucket.list_blobs(prefix='backup/'):
              if blob.updated and blob.updated > cutoff:
                  recent_backups.append(blob.name)

          if not recent_backups:
              print("ERROR: No recent backups found in last 48 hours!")
              with open('backup-status.txt', 'w') as f:
                  f.write('failed')
              exit(1)
          else:
              print(f"OK: Found {len(recent_backups)} recent backups")
              with open('backup-status.txt', 'w') as f:
                  f.write('ok')
          EOF

      - name: Create issue if backups are stale
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '‚ö†Ô∏è Database Backups Are Stale',
              body: `## Database Backup Alert

              No recent database backups found in the last 48 hours.

              **Check Time**: ${new Date().toISOString()}

              ### Action Required
              1. Verify Cloud Scheduler is running
              2. Check database sync logs
              3. Manually trigger backup if needed

              **Auto-generated by monitoring**`,
              labels: ['database', 'backup', 'automated'],
              assignees: [context.repo.owner]
            });

  performance-metrics:
    name: Track Performance Metrics
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'  # Latest stable
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run performance benchmark
        run: |
          python scripts/performance_benchmark.py > perf-report.txt 2>&1 || true

      - name: Upload performance report
        uses: actions/upload-artifact@v4
        with:
          name: performance-report-${{ github.run_number }}
          path: perf-report.txt

      - name: Check for performance degradation
        run: |
          # TODO: Compare with baseline metrics
          # For now, just log the results
          cat perf-report.txt
