name: Automated Monitoring & Health Checks

on:
  schedule:
    - cron: '0 0,12 * * *'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  health-monitor:
    name: System Health Monitor
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          persist-credentials: false

      - name: Set up Python 3.12
        uses: actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d
        with:
          python-version: '3.12.10'
          cache: pip
          cache-dependency-path: requirements.txt

      - name: Prepare configuration
        run: |
          cp .env.example .env
          mkdir -p config data
          cp config/user_prefs.example.json config/user_prefs.json
          chmod 600 .env || true

      - name: Install dependencies
        run: python -m pip install -r requirements.txt

      - name: Run health check
        id: health
        continue-on-error: true
        run: |
          set -euo pipefail
          python -m src.agent --mode health | tee health-report.txt

      - name: Derive health status
        id: status
        env:
          STEP_OUTCOME: ${{ steps.health.outcome }}
        run: |
          set -euo pipefail
          if [ "$STEP_OUTCOME" = "failure" ]; then
            echo "status=critical" >> "$GITHUB_OUTPUT"
          elif grep -q "CRITICAL" health-report.txt; then
            echo "status=critical" >> "$GITHUB_OUTPUT"
          elif grep -q "WARNING" health-report.txt; then
            echo "status=warning" >> "$GITHUB_OUTPUT"
          else
            echo "status=ok" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload health report
        if: always()
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874
        with:
          name: health-report-${{ github.run_number }}
          path: health-report.txt

      - name: Create issue for critical status
        if: steps.status.outputs.status == 'critical'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('health-report.txt', 'utf8');
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'CRITICAL: System health check failed',
              body: `## Critical Health Check Failure

              **Time**: ${new Date().toISOString()}
              **Workflow Run**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

              ### Health Report
              \`\`\`
              ${report}
              \`\`\`
              `,
              labels: ['critical', 'health-check', 'automated'],
              assignees: [context.repo.owner]
            });

  database-backup-check:
    name: Verify Database Backups
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    permissions:
      contents: read
      issues: write
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          persist-credentials: false

      - name: Set up Python 3.12
        uses: actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d
        with:
          python-version: '3.12.10'

      - name: Install dependencies
        run: python -m pip install google-cloud-storage

      - name: Check backup recency
        env:
          STORAGE_BUCKET: ${{ secrets.GCP_STORAGE_BUCKET }}
          GOOGLE_APPLICATION_CREDENTIALS_JSON: ${{ secrets.GCP_SA_KEY }}
        run: |
          python <<'PY'
          import os
          import json
          from datetime import datetime, timezone, timedelta
          from google.cloud import storage
          from google.oauth2 import service_account

          bucket_name = os.getenv('STORAGE_BUCKET')
          creds_json = os.getenv('GOOGLE_APPLICATION_CREDENTIALS_JSON')

          if not bucket_name or not creds_json:
              print('Cloud storage not configured - skipping backup recency check')
              raise SystemExit(0)

          credentials = service_account.Credentials.from_service_account_info(json.loads(creds_json))
          client = storage.Client(credentials=credentials)
          bucket = client.bucket(bucket_name)

          cutoff = datetime.now(timezone.utc) - timedelta(hours=48)
          recent = [blob.name for blob in bucket.list_blobs(prefix='backup/') if blob.updated and blob.updated > cutoff]

          if not recent:
              print('ERROR: No recent backups found in last 48 hours!')
              raise SystemExit(1)

          print(f'OK: Found {len(recent)} recent backups')
          PY

      - name: Create issue if backups are stale
        if: failure()
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Database backups are stale',
              body: `No recent database backups were found in the last 48 hours.

              **Check Time**: ${new Date().toISOString()}

              ### Next steps
              1. Verify Cloud Scheduler is running.
              2. Check database sync logs.
              3. Manually trigger backup if required.
              `,
              labels: ['database', 'backup', 'automated'],
              assignees: [context.repo.owner]
            });

  performance-metrics:
    name: Track Performance Metrics
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          persist-credentials: false

      - name: Set up Python 3.12
        uses: actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d
        with:
          python-version: '3.12.10'
          cache: pip
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: python -m pip install -r requirements.txt

      - name: Run performance benchmark
        continue-on-error: true
        run: |
          set -euo pipefail
          python scripts/performance_benchmark.py | tee perf-report.txt

      - name: Upload performance report
        if: always()
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874
        with:
          name: performance-report-${{ github.run_number }}
          path: perf-report.txt

      - name: Surface performance warnings
        if: failure()
        run: |
          echo 'Performance benchmark reported a failure. Review perf-report.txt for details.'
          exit 1
