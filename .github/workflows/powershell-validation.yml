name: PowerShell Validation

on:
  push:
    paths:
      - '**/*.ps1'
      - '.github/workflows/powershell-validation.yml'
  pull_request:
    paths:
      - '**/*.ps1'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  powershell-analysis:
    name: PowerShell Script Analysis
    runs-on: windows-latest
    outputs:
      ps_files: ${{ steps.get_ps_files.outputs.ps_files }}
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          persist-credentials: false

      - name: Get PowerShell files
        id: get_ps_files
        shell: pwsh
        run: |
          $psFiles = Get-ChildItem -Path . -Filter "*.ps1" -Recurse | Select-Object -ExpandProperty FullName
          $jsonOutput = (@($psFiles) | ConvertTo-Json)
          "ps_files<<EOF" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8
          $jsonOutput | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
          "EOF" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8

      - name: Install PSScriptAnalyzer
        shell: pwsh
        run: Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser

      - name: Run PSScriptAnalyzer
        shell: pwsh
        env:
          PS_FILES_JSON: ${{ steps.get_ps_files.outputs.ps_files }}
        run: |
          Write-Host "Running PowerShell Script Analysis..."
          $psFiles = ConvertFrom-Json $env:PS_FILES_JSON
          $issues = @()
          foreach ($file in $psFiles) {
              Write-Host "Analyzing: $([System.IO.Path]::GetFileName($file))"
              $results = Invoke-ScriptAnalyzer `
                -Path $file `
                -Severity @('Error','Warning')
              if ($results) {
                  $issues += $results
                  Write-Host "Found $($results.Count) issues in $(Split-Path -Leaf $file)" -ForegroundColor Yellow
                  foreach ($result in $results) {
                      $color = if ($result.Severity -eq 'Error') { 'Red' } else { 'Yellow' }
                      Write-Host "  $($result.Severity): $($result.Message)" -ForegroundColor $color
                      Write-Host "    Line $($result.Line): $($result.ScriptName)" -ForegroundColor Gray
                  }
              } else {
                  Write-Host "No issues found in $(Split-Path -Leaf $file)" -ForegroundColor Green
              }
          }
          Write-Host ""
          Write-Host "Analysis Summary:" -ForegroundColor Cyan
          Write-Host "Files analyzed: $($psFiles.Count)"
          Write-Host "Total issues: $($issues.Count)"
          $errors = $issues | Where-Object { $_.Severity -eq 'Error' }
          $warnings = $issues | Where-Object { $_.Severity -eq 'Warning' }
          Write-Host "Errors: $($errors.Count)" -ForegroundColor Red
          Write-Host "Warnings: $($warnings.Count)" -ForegroundColor Yellow
          if ($errors.Count -gt 0) {
              Write-Host "PowerShell analysis failed due to errors" -ForegroundColor Red
              exit 1
          }
          Write-Host "PowerShell analysis passed" -ForegroundColor Green

  powershell-syntax-test:
    name: PowerShell Syntax Test
    runs-on: windows-latest
    needs: powershell-analysis
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          persist-credentials: false

      - name: Test PowerShell syntax
        shell: pwsh
        env:
          PS_FILES_JSON: ${{ needs.powershell-analysis.outputs.ps_files }}
        run: |
          Write-Host "Testing PowerShell syntax..."
          $psFiles = ConvertFrom-Json $env:PS_FILES_JSON
          $syntaxErrors = @()
          foreach ($file in $psFiles) {
              Write-Host "Testing syntax: $(Split-Path -Leaf $file)"
              try {
                  $tokens = $null
                  $parseErrors = $null
                  [void][System.Management.Automation.Language.Parser]::ParseFile(
                      $file,
                      [ref]$tokens,
                      [ref]$parseErrors
                  )
                  if ($parseErrors) {
                      $syntaxErrors += $parseErrors
                      Write-Host "Syntax errors in $(Split-Path -Leaf $file):" -ForegroundColor Red
                      foreach ($error in $parseErrors) {
                          Write-Host "  Line $($error.Extent.StartLineNumber): $($error.Message)" -ForegroundColor Red
                      }
                  } else {
                      Write-Host "Syntax OK: $(Split-Path -Leaf $file)" -ForegroundColor Green
                  }
              } catch {
                  Write-Host "Failed to parse $($file): $($_.Exception.Message)" -ForegroundColor Red
                  $syntaxErrors += $_.Exception.Message
              }
          }
          Write-Host ""
          Write-Host "Syntax Test Summary:" -ForegroundColor Cyan
          Write-Host "Files tested: $($psFiles.Count)"
          Write-Host "Syntax errors: $($syntaxErrors.Count)"
          if ($syntaxErrors.Count -gt 0) {
              Write-Host "Syntax test failed" -ForegroundColor Red
              exit 1
          }
          Write-Host "All PowerShell files have valid syntax" -ForegroundColor Green

  powershell-security-test:
    name: PowerShell Security Test
    runs-on: windows-latest
    needs: powershell-analysis
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          persist-credentials: false

      - name: PowerShell security analysis
        shell: pwsh
        run: |
          Write-Host "Running PowerShell security analysis..."
          $psFiles = ConvertFrom-Json '${{ needs.powershell-analysis.outputs.ps_files }}'
          $securityIssues = @()
          $securityPatterns = @{
              'Invoke-Expression with user input' = 'Invoke-Expression.*\$.*'
              'Unrestricted execution policy' = 'Set-ExecutionPolicy.*Unrestricted'
              'Download without verification' = 'DownloadString.*http[^s]'
              'Hardcoded credentials' = "(password|secret|key)\s*=\s*['\"]{1}[^'\"]{8,}['\"]{1}"
              'Unsafe web requests' = 'System\\.Net\\.WebClient.*Download'
          }
          foreach ($file in $psFiles) {
              Write-Host "Security scan: $(Split-Path -Leaf $file)"
              $content = Get-Content -Path $file -Raw
              foreach ($patternName in $securityPatterns.Keys) {
                  if ($content -match $securityPatterns[$patternName]) {
                      $securityIssues += @{
                          File = $file
                          Issue = $patternName
                          Pattern = $securityPatterns[$patternName]
                      }
                      Write-Host "Security concern in $(Split-Path -Leaf $file): $patternName" -ForegroundColor Yellow
                  }
              }
          }
          Write-Host ""
          Write-Host "Security Analysis Summary:" -ForegroundColor Cyan
          Write-Host "Files scanned: $($psFiles.Count)"
          Write-Host "Security concerns: $($securityIssues.Count)"
          if ($securityIssues.Count -gt 0) {
              Write-Host "Security analysis completed with concerns" -ForegroundColor Yellow
              Write-Host "Review the issues above - they may be acceptable depending on context"
          } else {
              Write-Host "No security concerns found" -ForegroundColor Green
          }
