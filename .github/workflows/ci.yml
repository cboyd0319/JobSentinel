name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE.md'
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE.md'
  workflow_dispatch:  # ðŸ’° MANUAL ONLY: No scheduled runs for personal project

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      core-python: ${{ steps.changes.outputs.core-python }}
      platform-scripts: ${{ steps.changes.outputs.platform-scripts }}
      windows-specific: ${{ steps.changes.outputs.windows-specific }}
      docs-only: ${{ steps.changes.outputs.docs-only }}
      workflows: ${{ steps.changes.outputs.workflows }}
    steps:
      - uses: actions/checkout@v5
        with:
          persist-credentials: false

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            core-python:
              - 'src/**/*.py'
              - 'utils/**/*.py'
              - 'sources/**/*.py'
              - 'notify/**/*.py'
              - 'matchers/**/*.py'
              - 'requirements.txt'
            platform-scripts:
              - 'scripts/**/*.py'
              - 'scripts/**/*.sh'
              - '*.sh'
              - '*.py'
            windows-specific:
              - 'scripts/**/*.ps1'
              - '*.ps1'
              - 'scripts/setup_windows*'
            workflows:
              - '.github/workflows/**'
            markdown:
              - '**/*.md'
            non-doc:
              type: union
              filters:
                - core-python
                - platform-scripts
                - windows-specific
                - workflows
            docs-only:
              type: difference
              filters:
                - markdown
                - non-doc

  primary-test:
    needs: changes
    if: needs.changes.outputs.docs-only == 'false'
    name: Fast Primary Test (Ubuntu, Python 3.13)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          persist-credentials: false

      - name: Prepare Python environment
        uses: ./.github/actions/python-env
        with:
          python-version: '3.13'
          install-deps: 'true'
          prepare-config: 'true'
          cache-dependency-path: requirements.txt

      - name: Run basic syntax check
        run: |
          find . -name "*.py" -not -path "./.venv/*" -not -path "./build/*" \
            -exec python -m py_compile {} +

      - name: Test database functionality
        run: |
          python - <<'PY'
          import asyncio
          from src.database import init_db, get_database_stats

          async def test_db():
              await init_db()
              stats = await get_database_stats()
              print('Database initialization and stats check passed')
              print(f'Database stats: {stats}')

          asyncio.run(test_db())
          PY

      - name: Install dev extras for core checks
        run: |
          python -m pip install -e .[dev]

      - name: Core quality gates (lint/type/cov)
        run: |
          make lint
          make type
          make cov

      - name: Bandit (src/jsa)
        run: |
          python -m pip install bandit
          python -m bandit -q -r src/jsa

      - name: pip-audit (requirements)
        run: |
          python -m pip install pip-audit
          pip-audit -r requirements.txt || true


  cross-platform-ubuntu:
    needs: [changes, primary-test]
    if: needs.changes.outputs.docs-only == 'false'
    name: Test Ubuntu
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          persist-credentials: false

      - name: Prepare Python environment
        uses: ./.github/actions/python-env
        with:
          python-version: '3.13'
          install-deps: 'true'
          prepare-config: 'true'

      - name: Test core functionality
        run: python -m src.agent --mode health

  # ðŸ’° REMOVED: Cross-platform testing for personal project cost savings
  # Can be manually triggered if needed via workflow_dispatch

  core-quality-matrix:
    needs: [changes]
    if: needs.changes.outputs.docs-only == 'false'
    name: Core Quality (Python ${{ matrix.py }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py: ["3.11", "3.12", "3.13"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          persist-credentials: false

      - name: Setup Python ${{ matrix.py }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py }}
          cache: pip
          cache-dependency-path: |
            requirements.txt

      - name: Install dependencies (runtime + dev, constrained)
        run: |
          python -m pip install --upgrade pip
          python -m pip install -c constraints/core.txt -r requirements.txt
          python -m pip install -c constraints/core.txt -e .[dev]

      - name: Lint, Type, Cov (core)
        run: |
          make lint
          make type
          make cov

      - name: Unit tests (core only)
        run: |
          python -m pytest -q tests/unit_jsa
