name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE.md'
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE.md'
  schedule:
    - cron: '0 6 * * 1'  # Weekly on Monday at 6 AM UTC
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      core-python: ${{ steps.changes.outputs.core-python }}
      platform-scripts: ${{ steps.changes.outputs.platform-scripts }}
      windows-specific: ${{ steps.changes.outputs.windows-specific }}
      docs-only: ${{ steps.changes.outputs.docs-only }}
      workflows: ${{ steps.changes.outputs.workflows }}
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            core-python:
              - 'src/**/*.py'
              - 'utils/**/*.py'
              - 'sources/**/*.py'
              - 'notify/**/*.py'
              - 'matchers/**/*.py'
              - 'requirements.txt'
            platform-scripts:
              - 'scripts/**/*.py'
              - 'scripts/**/*.sh'
              - '*.sh'
              - '*.py'
            windows-specific:
              - 'scripts/**/*.ps1'
              - '*.ps1'
              - 'scripts/setup_windows*'
            workflows:
              - '.github/workflows/**'
            markdown:
              - '**/*.md'
            non-doc:
              type: union
              filters:
                - core-python
                - platform-scripts
                - windows-specific
                - workflows
            docs-only:
              type: difference
              filters:
                - markdown
                - non-doc

  primary-test:
    needs: changes
    if: needs.changes.outputs.docs-only == 'false'
    name: Fast Primary Test (Ubuntu, Python 3.12)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Prepare Python environment
        uses: ./.github/actions/python-env
        with:
          install-deps: 'true'
          prepare-config: 'true'
          cache-dependency-path: requirements.txt

      - name: Run basic syntax check
        run: |
          find . -name "*.py" -not -path "./.venv/*" -not -path "./build/*" \
            -exec python -m py_compile {} +

      - name: Test database functionality
        run: |
          python - <<'PY'
          import asyncio
          from src.database import init_db, get_database_stats

          async def test_db():
              await init_db()
              stats = await get_database_stats()
              print('Database initialization and stats check passed')
              print(f'Database stats: {stats}')

          asyncio.run(test_db())
          PY

  code-quality:
    needs: changes
    if: needs.changes.outputs.docs-only == 'false'
    name: Code Quality
    runs-on: ubuntu-latest
    env:
      HAS_GCP_CREDS: ${{ secrets.GCP_SA_KEY != '' || secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON != '' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Prepare Python environment
        uses: ./.github/actions/python-env
        with:
          install-deps: 'true'
          prepare-config: 'true'
          cache-dependency-path: requirements.txt

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform Init
        run: terraform -chdir=terraform/gcp/ init -backend=false

      - name: Terraform Format Check
        id: fmt_check
        run: terraform -chdir=terraform/gcp/ fmt -check -recursive
        continue-on-error: true

      - name: Report Terraform format issues
        if: steps.fmt_check.outcome == 'failure'
        run: |
          echo "Terraform format check failed. The following files are not formatted correctly:"
          terraform -chdir=terraform/gcp/ fmt -check -recursive
          echo "Please run 'terraform fmt -recursive terraform/gcp/' locally to fix and commit the changes."
          exit 1

      - name: Terraform Format Fix (if needed)
        if: steps.fmt_check.outcome == 'failure'
        run: terraform -chdir=terraform/gcp/ fmt -recursive

      - name: Lint with flake8
        continue-on-error: true
        run: flake8 src/ utils/ sources/ notify/ matchers/ || echo "Flake8 found issues - logging only"

  cross-platform-ubuntu:
    needs: [changes, primary-test, code-quality]
    if: needs.changes.outputs.docs-only == 'false'
    name: Test Ubuntu
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Prepare Python environment
        uses: ./.github/actions/python-env
        with:
          python-version: '3.12.10'
          install-deps: 'true'
          prepare-config: 'true'

      - name: Test core functionality
        run: python -m src.agent --mode health

  cross-platform-windows:
    needs: [changes, primary-test, code-quality]
    if: |
      needs.changes.outputs.docs-only == 'false' &&
      (needs.changes.outputs.windows-specific == 'true' ||
       github.event_name == 'schedule' ||
       github.event_name == 'workflow_dispatch')
    name: Test Windows
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Prepare Python environment
        uses: ./.github/actions/python-env
        with:
          python-version: '3.12.10'
          install-deps: 'true'
          prepare-config: 'true'

      - name: Test core functionality
        run: python -m src.agent --mode health

  cross-platform-macos:
    needs: [changes, primary-test, code-quality]
    if: |
      needs.changes.outputs.docs-only == 'false' &&
      (github.event_name == 'schedule' ||
       github.event_name == 'workflow_dispatch')
    name: Test macOS
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Prepare Python environment
        uses: ./.github/actions/python-env
        with:
          python-version: '3.12.10'
          install-deps: 'true'
          prepare-config: 'true'

      - name: Test core functionality
        run: python -m src.agent --mode health

  type-check:
    needs: [changes, code-quality]
    if: |
      needs.changes.outputs.docs-only == 'false' &&
      (github.event_name == 'schedule' ||
       github.event_name == 'workflow_dispatch' ||
       github.event_name == 'pull_request')
    name: Type Check (mypy)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Prepare Python environment
        uses: ./.github/actions/python-env
        with:
          install-deps: 'true'
          cache-dependency-path: requirements.txt

      - name: Install type stubs
        run: python -m pip install mypy types-requests types-setuptools

      - name: Run mypy
        continue-on-error: true
        run: mypy src/ utils/ sources/ notify/ matchers/ --ignore-missing-imports --no-strict-optional || echo "Mypy found issues - logging only"
