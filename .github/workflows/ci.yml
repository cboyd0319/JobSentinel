name: CI/CD Pipeline (Optimized)

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      core-python: ${{ steps.changes.outputs.core-python }}
      platform-scripts: ${{ steps.changes.outputs.platform-scripts }}
      windows-specific: ${{ steps.changes.outputs.windows-specific }}
      docs-only: ${{ steps.changes.outputs.docs-only }}
      workflows: ${{ steps.changes.outputs.workflows }}
    steps:
      - uses: actions/checkout@v5
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            core-python:
              - 'src/**/*.py'
              - 'utils/**/*.py'
              - 'sources/**/*.py'
              - 'notify/**/*.py'
              - 'matchers/**/*.py'
              - 'requirements.txt'
            platform-scripts:
              - 'scripts/**'
              - '*.sh'
              - '*.ps1'
            windows-specific:
              - '**/*.ps1'
              - 'scripts/setup_windows*'
            docs-only:
              - '**/*.md'
              - 'docs/**'
            workflows:
              - '.github/workflows/**'

  primary-test:
    needs: changes
    if: needs.changes.outputs.core-python == 'true' || needs.changes.outputs.workflows == 'true'
    name: üöÄ Fast Primary Test (Ubuntu + Python 3.12)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run basic syntax check
        run: |
          python3 -m py_compile src/*.py
          python3 -m py_compile utils/*.py
          python3 -m py_compile sources/*.py

      - name: Test database functionality
        run: |
          cp .env.example .env
          mkdir -p data
          mkdir -p config
          cp config/user_prefs.example.json config/user_prefs.json
          chmod 600 .env || true
          python3 -c "
          import os
          os.environ['CI'] = 'true'
          from src.database import init_db, get_database_stats
          init_db()
          stats = get_database_stats()
          print('‚úÖ Database initialization and stats check passed')
          print(f'Database stats: {stats}')
          "

  cross-platform-test:
    needs: [changes, primary-test]
    if: needs.changes.outputs.core-python == 'true' && needs.primary-test.result == 'success'
    name: üåç Cross-Platform Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.12.10']
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Test core functionality
        run: |
          python3 -c "import src.agent; print('‚úÖ Agent module OK')"
          python3 src/agent.py --mode health

  powershell-validation:
    needs: changes
    if: needs.changes.outputs.windows-specific == 'true' || needs.changes.outputs.platform-scripts == 'true'
    name: ü™ü PowerShell Script Validation
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Test PowerShell script syntax
        run: |
          Get-Content scripts/setup_windows.ps1 | ForEach-Object {
            $null = [System.Management.Automation.PSParser]::Tokenize($_, [ref]$null)
          }
          Write-Host "‚úÖ PowerShell syntax is valid"

      - name: Test PowerShell script execution (dry run)
        run: |
          # Test script can be loaded without execution
          $scriptContent = Get-Content scripts/setup_windows.ps1 -Raw
          $null = [scriptblock]::Create($scriptContent)
          Write-Host "‚úÖ PowerShell script can be executed"
