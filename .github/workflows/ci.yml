name: CI/CD Pipeline (Optimized)

'on':
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

permissions:
  contents: read
  actions: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      core-python: ${{ steps.changes.outputs.core-python }}
      platform-scripts: ${{ steps.changes.outputs.platform-scripts }}
      windows-specific: ${{ steps.changes.outputs.windows-specific }}
      docs-only: ${{ steps.changes.outputs.docs-only }}
      workflows: ${{ steps.changes.outputs.workflows }}
    steps:
      - uses: actions/checkout@v5
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            core-python:
              - 'src/**/*.py'
              - 'utils/**/*.py'
              - 'sources/**/*.py'
              - 'notify/**/*.py'
              - 'matchers/**/*.py'
              - 'requirements.txt'
            platform-scripts:
              - 'scripts/**/*.py'
              - 'scripts/**/*.sh'
              - '*.sh'
              - '*.py'
            windows-specific:
              - 'scripts/**/*.ps1'
              - '*.ps1'
              - 'scripts/setup_windows*'
            workflows:
              - '.github/workflows/**'
            markdown:
              - '**/*.md'
            non-doc:
              type: union
              filters:
                - core-python
                - platform-scripts
                - windows-specific
                - workflows
            docs-only:
              type: difference
              filters:
                - markdown
                - non-doc

  primary-test:
    needs: [changes, code-quality]
    if: >-
      needs.changes.outputs.docs-only != 'true' && (
        needs.changes.outputs.core-python == 'true' ||
        needs.changes.outputs.workflows == 'true'
      )
    name: Fast Primary Test (Ubuntu + Python 3.12)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          persist-credentials: false

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.10'
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run basic syntax check
        run: |
          find . -name "*.py" -not -path "./.venv/*" -not -path "./build/*" \
            -exec python3 -m py_compile {} +

      - name: Test database functionality
        run: |
          cp .env.example .env
          mkdir -p data
          mkdir -p config
          cp config/user_prefs.example.json config/user_prefs.json
          chmod 600 .env || true
          python3 -c "
          import os
          import asyncio
          os.environ['CI'] = 'true'
          from src.database import init_db, get_database_stats
          async def test_db():
              await init_db()
              stats = await get_database_stats()
              print('Database initialization and stats check passed')
              print(f'Database stats: {stats}')
          asyncio.run(test_db())
          "

  cross-platform-test:
    needs: [changes, primary-test, code-quality]
    if: >-
      needs.changes.outputs.core-python == 'true' &&
      needs.primary-test.result == 'success'
    name: Cross-Platform Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.12.10']
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          persist-credentials: false

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Test core functionality
        run: |
          python -m src.agent --mode health

  code-quality:
    needs: changes
    if: needs.changes.outputs.core-python == 'true'
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.10'
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black isort flake8 bandit safety pytest

      - name: Run Black (Formatter)
        run: black --check src/ utils/ sources/ notify/ matchers/

      - name: Run Isort (Import Sorter)
        run: isort --check-only src/ utils/ sources/ notify/ matchers/

      - name: Run Flake8 (Linter)
        run: flake8 src/ utils/ sources/ notify/ matchers/

      - name: Run Bandit (Security Linter)
        run: bandit -r . -x .venv --quiet

      - name: Run Safety (Dependency Vulnerability Scan)
        run: safety check -r requirements.txt

      - name: Run Pytest (Unit Tests)
        run: pytest tests/ -v

  type-check:
    needs: [changes, code-quality]
    if: needs.changes.outputs.core-python == 'true'
    name: Type Check (Mypy)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.10'
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install mypy types-requests types-setuptools

      - name: Run Mypy
        run: mypy src/ utils/ sources/ notify/ matchers/ --ignore-missing-imports --no-strict-optional

  powershell-validation:
    needs: changes
    if: >-
      needs.changes.outputs.windows-specific == 'true' ||
      needs.changes.outputs.platform-scripts == 'true'
    name: PowerShell Script Validation
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          persist-credentials: false

      - name: Test PowerShell script syntax
        run: |
          Get-Content scripts/setup_windows.ps1 | ForEach-Object {
            $null = [System.Management.Automation.PSParser]::Tokenize(
              $_, [ref]$null)
          }
          Write-Host "PowerShell syntax is valid"

      - name: Test PowerShell script execution (dry run)
        run: |
          # Test script can be loaded without execution
          $scriptContent = Get-Content scripts/setup_windows.ps1 -Raw
          $null = [scriptblock]::Create($scriptContent)
          Write-Host "PowerShell script can be executed"
