name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      core-python: ${{ steps.changes.outputs.core-python }}
      platform-scripts: ${{ steps.changes.outputs.platform-scripts }}
      windows-specific: ${{ steps.changes.outputs.windows-specific }}
      docs-only: ${{ steps.changes.outputs.docs-only }}
      workflows: ${{ steps.changes.outputs.workflows }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          persist-credentials: false

      - uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36
        id: changes
        with:
          filters: |
            core-python:
              - 'src/**/*.py'
              - 'utils/**/*.py'
              - 'sources/**/*.py'
              - 'notify/**/*.py'
              - 'matchers/**/*.py'
              - 'requirements.txt'
            platform-scripts:
              - 'scripts/**/*.py'
              - 'scripts/**/*.sh'
              - '*.sh'
              - '*.py'
            windows-specific:
              - 'scripts/**/*.ps1'
              - '*.ps1'
              - 'scripts/setup_windows*'
            workflows:
              - '.github/workflows/**'
            markdown:
              - '**/*.md'
            non-doc:
              type: union
              filters:
                - core-python
                - platform-scripts
                - windows-specific
                - workflows
            docs-only:
              type: difference
              filters:
                - markdown
                - non-doc

  primary-test:
    needs: changes
    if: >-
      needs.changes.outputs.docs-only != 'true' && (
        needs.changes.outputs.core-python == 'true' ||
        needs.changes.outputs.workflows == 'true'
      )
    name: Fast Primary Test (Ubuntu, Python 3.12)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          persist-credentials: false

      - name: Set up Python 3.12
        uses: actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d
        with:
          python-version: '3.12.10'
          cache: pip
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      - name: Run basic syntax check
        run: |
          find . -name "*.py" -not -path "./.venv/*" -not -path "./build/*" \
            -exec python -m py_compile {} +

      - name: Test database functionality
        run: |
          cp .env.example .env
          mkdir -p data config
          cp config/user_prefs.example.json config/user_prefs.json
          chmod 600 .env || true
          python - <<'PY'
          import asyncio
          from src.database import init_db, get_database_stats

          async def test_db():
              await init_db()
              stats = await get_database_stats()
              print('Database initialization and stats check passed')
              print(f'Database stats: {stats}')

          asyncio.run(test_db())
          PY

  code-quality:
    needs: changes
    if: needs.changes.outputs.core-python == 'true'
    name: Code Quality
    runs-on: ubuntu-latest
    env:
      HAS_GCP_CREDS: ${{ secrets.GCP_SA_KEY != '' || secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON != '' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          persist-credentials: false

      - name: Set up Python 3.12
        uses: actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d
        with:
          python-version: '3.12.10'
          cache: pip
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@a1502cd9e758c50496cc9ac5308c4843bcd56d36
        with:
          terraform_version: 1.6.6

      - name: Terraform Init
        run: terraform -chdir=terraform/gcp/ init -backend=false

      - name: Terraform Format Check
        id: fmt
        run: terraform -chdir=terraform/gcp/ fmt -check -recursive
        continue-on-error: true

      - name: Terraform Validate
        id: validate
        run: terraform -chdir=terraform/gcp/ validate

      - name: Terraform Plan (no changes expected)
        id: plan
        if: env.HAS_GCP_CREDS == 'true'
        run: |
          terraform -chdir=terraform/gcp/ plan -detailed-exitcode \
            -var="project_id=dummy-project" \
            -var="region=us-central1" \
            -var="billing_account_id=dummy-billing" \
            -var="source_repo=dummy/repo" \
            -var="alert_email_address=test@example.com"
        continue-on-error: true

      - name: Skip Terraform plan (no credentials)
        if: env.HAS_GCP_CREDS != 'true'
        run: echo "Terraform plan skipped because no GCP credentials are configured in CI."

      - name: Report Terraform format issues
        if: steps.fmt.outcome == 'failure'
        run: |
          echo "Terraform format check failed. Run 'terraform fmt -recursive terraform/gcp/' locally to fix."
          exit 1

      - name: Report Terraform plan changes
        if: steps.plan.outcome == 'failure'
        run: |
          echo "Terraform plan reported unexpected changes or errors. Review terraform/gcp/."
          exit 1

      - name: Lint with flake8
        run: flake8 src/ utils/ sources/ notify/ matchers/

  cross-platform-test:
    needs: [changes, primary-test, code-quality]
    if: needs.changes.outputs.core-python == 'true'
    name: Cross-Platform Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.12.10']
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: python -m pip install -r requirements.txt

      - name: Prepare configuration
        run: |
          python - <<'PY'
          from pathlib import Path
          import shutil

          repo = Path.cwd()
          env_src = repo / '.env.example'
          env_dst = repo / '.env'
          config_dir = repo / 'config'
          data_dir = repo / 'data'
          prefs_src = config_dir / 'user_prefs.example.json'
          prefs_dst = config_dir / 'user_prefs.json'

          if env_src.exists():
              shutil.copyfile(env_src, env_dst)
              try:
                  env_dst.chmod(0o600)
              except OSError:
                  pass

          config_dir.mkdir(parents=True, exist_ok=True)
          data_dir.mkdir(parents=True, exist_ok=True)

          if prefs_src.exists():
              shutil.copyfile(prefs_src, prefs_dst)
          PY

      - name: Test core functionality
        run: python -m src.agent --mode health

  type-check:
    needs: [changes, code-quality]
    if: needs.changes.outputs.core-python == 'true'
    name: Type Check (mypy)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          persist-credentials: false

      - name: Set up Python 3.12
        uses: actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d
        with:
          python-version: '3.12.10'
          cache: pip
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install mypy types-requests types-setuptools

      - name: Run mypy
        run: mypy src/ utils/ sources/ notify/ matchers/ --ignore-missing-imports --no-strict-optional
