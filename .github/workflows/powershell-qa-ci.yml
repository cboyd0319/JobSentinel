name: PowerShell QA System CI/CD
on:
  push:
    branches: [ main, develop, 'feature/*', 'hotfix/*' ]
    paths:
      - 'tools/powershell-qa/**'
      - '**/*.ps1'
      - '**/*.psm1'
      - '**/*.psd1'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'tools/powershell-qa/**'
      - '**/*.ps1'
      - '**/*.psm1'
      - '**/*.psd1'
  workflow_dispatch:
    inputs:
      mode:
        description: 'QA Mode'
        required: true
        default: 'analyze'
        type: choice
        options:
          - analyze
          - fix
          - validate
          - report
          - selfheal
      safety_level:
        description: 'Safety Level'
        required: true
        default: 'Standard'
        type: choice
        options:
          - Conservative
          - Standard
          - Aggressive

env:
  POWERSHELL_VERSION: '7.4.x'
  PSQA_LOG_LEVEL: 'Info'
  PSQA_TRACE_ID: ${{ github.run_id }}
  
jobs:
  
  # === VALIDATION JOBS ===
  
  validate-qa-system:
    name: Validate QA System
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup PowerShell 7
        uses: azure/powershell@v2
        with:
          azPSVersion: latest
          inlineScript: |
            Write-Host "PowerShell Version: $($PSVersionTable.PSVersion)"
            Write-Host "Platform: $($PSVersionTable.Platform)"
            
      - name: Install Required Modules
        shell: pwsh
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Install-Module PSScriptAnalyzer -Scope CurrentUser -Force -MinimumVersion 1.19.0
          Install-Module Pester -Scope CurrentUser -Force -MinimumVersion 5.0.0
          Get-Module PSScriptAnalyzer, Pester -ListAvailable | Select-Object Name, Version
          
      - name: Validate QA System Structure
        shell: pwsh
        working-directory: tools/powershell-qa
        run: |
          # Validate required files exist
          $requiredFiles = @(
            'Invoke-PSQAUltimateAutofix.ps1',
            'Invoke-PSFixitElite.ps1',
            'config/PSQASettings.Production.psd1',
            'tests/PSQASystem.Ultimate.Tests.ps1'
          )
          
          foreach ($file in $requiredFiles) {
            if (-not (Test-Path $file)) {
              throw "Required file missing: $file"
            }
            Write-Host "‚úÖ Found: $file"
          }
          
      - name: Syntax Validation
        shell: pwsh
        working-directory: tools/powershell-qa
        run: |
          $errors = @()
          Get-ChildItem -Recurse -Include '*.ps1', '*.psm1', '*.psd1' | ForEach-Object {
            try {
              $null = [System.Management.Automation.PSParser]::Tokenize((Get-Content $_.FullName -Raw), [ref]$null)
              Write-Host "‚úÖ Syntax OK: $($_.Name)"
            } catch {
              $errors += "‚ùå Syntax Error in $($_.Name): $($_.Exception.Message)"
            }
          }
          
          if ($errors) {
            $errors | ForEach-Object { Write-Error $_ }
            exit 1
          }
          
  # === CROSS-PLATFORM TESTING ===
          
  test-cross-platform:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    needs: validate-qa-system
    
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup PowerShell
        uses: azure/powershell@v2
        with:
          azPSVersion: latest
          
      - name: Install Dependencies
        shell: pwsh
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Install-Module PSScriptAnalyzer -Scope CurrentUser -Force
          Install-Module Pester -Scope CurrentUser -Force
          
      - name: Run Ultimate QA System Test
        shell: pwsh
        working-directory: tools/powershell-qa
        run: |
          # Test the ultimate autofix system
          $result = ./Invoke-PSQAUltimateAutofix.ps1 -Path "." -Mode analyze -LogLevel Info
          
          if ($LASTEXITCODE -ne 0) {
            Write-Error "QA System test failed with exit code: $LASTEXITCODE"
            exit 1
          }
          
      - name: Run Pester Tests
        shell: pwsh
        working-directory: tools/powershell-qa
        run: |
          # Run comprehensive test suite
          $testResults = Invoke-Pester -Path tests/PSQASystem.Ultimate.Tests.ps1 -Output Detailed -PassThru
          
          if ($testResults.FailedCount -gt 0) {
            Write-Error "$($testResults.FailedCount) tests failed"
            exit 1
          }
          
  # === COMPREHENSIVE ANALYSIS ===
          
  analyze-powershell-code:
    name: Analyze PowerShell Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: validate-qa-system
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup PowerShell
        uses: azure/powershell@v2
        with:
          azPSVersion: latest
          
      - name: Install Dependencies
        shell: pwsh
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Install-Module PSScriptAnalyzer -Scope CurrentUser -Force
          
      - name: Run Comprehensive Analysis
        shell: pwsh
        run: |
          # Run QA analysis on entire repository
          $qaScript = "./tools/powershell-qa/Invoke-PSQAUltimateAutofix.ps1"
          
          Write-Host "üöÄ Starting comprehensive PowerShell QA analysis..."
          
          $analysisResult = & $qaScript -Path "." -Mode analyze -LogLevel Info
          $exitCode = $LASTEXITCODE
          
          Write-Host "Analysis completed with exit code: $exitCode"
          
          # Generate reports
          if (Test-Path "reports") {
            Get-ChildItem reports -Recurse | ForEach-Object {
              Write-Host "üìä Generated report: $($_.FullName)"
            }
          }
          
          # Fail build on critical issues (but allow warnings)
          if ($exitCode -eq 2) {
            Write-Error "Critical errors found in PowerShell code analysis"
            exit 1
          }
          
      - name: Upload Analysis Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: powershell-analysis-results-${{ runner.os }}
          path: |
            reports/
            logs/
          retention-days: 7
          
  # === SECURITY SCANNING ===
          
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: validate-qa-system
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup PowerShell
        uses: azure/powershell@v2
        with:
          azPSVersion: latest
          
      - name: Install Dependencies
        shell: pwsh
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Install-Module PSScriptAnalyzer -Scope CurrentUser -Force
          
      - name: Run Security Analysis
        shell: pwsh
        run: |
          # Focus on security-specific analysis
          $qaScript = "./tools/powershell-qa/Invoke-PSQAUltimateAutofix.ps1"
          
          Write-Host "üîí Running security-focused PowerShell analysis..."
          
          # Run with security mode (if available) or analyze mode with security focus
          & $qaScript -Path "." -Mode analyze -SafetyLevel Conservative
          
          # Check for specific security patterns
          Write-Host "üîç Scanning for security anti-patterns..."
          
          $securityIssues = Get-ChildItem -Recurse -Include '*.ps1', '*.psm1' | ForEach-Object {
            $content = Get-Content $_.FullName -Raw -ErrorAction SilentlyContinue
            if ($content) {
              $issues = @()
              
              # Check for dangerous patterns
              if ($content -match 'Invoke-Expression') {
                $issues += "‚ùå Invoke-Expression found in $($_.FullName)"
              }
              if ($content -match '-password.*=.*["''][^"'']+["'']') {
                $issues += "‚ùå Potential plaintext password in $($_.FullName)"
              }
              if ($content -match 'ConvertTo-SecureString.*-AsPlainText') {
                $issues += "‚ö†Ô∏è  Plain text to secure string conversion in $($_.FullName)"
              }
              
              return $issues
            }
          }
          
          $criticalIssues = $securityIssues | Where-Object { $_ -like "‚ùå*" }
          if ($criticalIssues) {
            Write-Host "üö® Critical security issues found:"
            $criticalIssues | ForEach-Object { Write-Host $_ }
            exit 1
          }
          
          $warnings = $securityIssues | Where-Object { $_ -like "‚ö†Ô∏è*" }
          if ($warnings) {
            Write-Host "‚ö†Ô∏è  Security warnings found:"
            $warnings | ForEach-Object { Write-Host $_ }
          }
          
  # === PERFORMANCE TESTING ===
          
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: validate-qa-system
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup PowerShell
        uses: azure/powershell@v2
        with:
          azPSVersion: latest
          
      - name: Install Dependencies
        shell: pwsh
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Install-Module PSScriptAnalyzer -Scope CurrentUser -Force
          
      - name: Run Performance Tests
        shell: pwsh
        working-directory: tools/powershell-qa
        env:
          ENABLE_STRESS_TESTS: true
        run: |
          # Run performance-focused tests
          Write-Host "‚ö° Running performance tests..."
          
          $perfResults = Invoke-Pester -Path tests/PSQASystem.Ultimate.Tests.ps1 -Tag 'Performance', 'Stress' -Output Detailed -PassThru
          
          if ($perfResults.FailedCount -gt 0) {
            Write-Error "Performance tests failed: $($perfResults.FailedCount) failures"
            exit 1
          }
          
          # Benchmark the QA system itself
          Write-Host "üìä Benchmarking QA system performance..."
          
          $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()
          $result = ./Invoke-PSQAUltimateAutofix.ps1 -Path "." -Mode analyze
          $stopwatch.Stop()
          
          Write-Host "‚úÖ QA analysis completed in $($stopwatch.ElapsedMilliseconds)ms"
          
          # Fail if performance is unacceptable (adjust thresholds as needed)
          if ($stopwatch.ElapsedMilliseconds -gt 120000) {  # 2 minutes
            Write-Error "QA system performance is too slow: $($stopwatch.ElapsedMilliseconds)ms"
            exit 1
          }
          
  # === AUTOFIX TESTING (CAREFUL!) ===
          
  test-autofix:
    name: Test Autofix Functionality
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [validate-qa-system, test-cross-platform]
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup PowerShell
        uses: azure/powershell@v2
        with:
          azPSVersion: latest
          
      - name: Install Dependencies
        shell: pwsh
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Install-Module PSScriptAnalyzer -Scope CurrentUser -Force
          
      - name: Test Autofix in Dry Run Mode
        shell: pwsh
        working-directory: tools/powershell-qa
        run: |
          # Test autofix functionality safely with dry run
          Write-Host "üß™ Testing autofix functionality in dry run mode..."
          
          # Create test files with known issues
          $testDir = "test-autofix"
          New-Item -ItemType Directory -Path $testDir -Force | Out-Null
          
          @'
function test-function {
    $unused = "test"
    Write-Host "should be Write-Output"
    return $true
}
'@ | Out-File -FilePath "$testDir/test-issues.ps1" -Encoding UTF8
          
          # Run autofix in dry run mode
          $result = ./Invoke-PSQAUltimateAutofix.ps1 -Path $testDir -Mode fix -DryRun -SafetyLevel Conservative
          
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Autofix dry run failed with exit code: $LASTEXITCODE"
            exit 1
          }
          
          Write-Host "‚úÖ Autofix dry run completed successfully"
          
          # Clean up
          Remove-Item -Path $testDir -Recurse -Force
          
  # === INTEGRATION AND DEPLOYMENT ===
          
  integration-test:
    name: Integration Testing
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [analyze-powershell-code, security-scan, performance-test]
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup PowerShell
        uses: azure/powershell@v2
        with:
          azPSVersion: latest
          
      - name: Install Dependencies
        shell: pwsh
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Install-Module PSScriptAnalyzer -Scope CurrentUser -Force
          Install-Module Pester -Scope CurrentUser -Force
          
      - name: Run Integration Tests
        shell: pwsh
        working-directory: tools/powershell-qa
        run: |
          Write-Host "üîÑ Running integration tests..."
          
          # Test all QA scripts work together
          $scripts = @(
            'Invoke-PSQAUltimateAutofix.ps1',
            'Invoke-PSFixitElite.ps1'
          )
          
          foreach ($script in $scripts) {
            if (Test-Path $script) {
              Write-Host "Testing integration of $script..."
              
              try {
                $result = & "./$script" -Path "." -Mode analyze 2>&1
                Write-Host "‚úÖ $script integration test passed"
              } catch {
                Write-Error "‚ùå $script integration test failed: $($_.Exception.Message)"
                exit 1
              }
            }
          }
          
      - name: Generate Final Report
        shell: pwsh
        working-directory: tools/powershell-qa
        run: |
          Write-Host "üìã Generating final QA report..."
          
          $reportData = @{
            Timestamp = Get-Date -Format 'o'
            GitRef = $env:GITHUB_REF
            GitSha = $env:GITHUB_SHA
            RunId = $env:GITHUB_RUN_ID
            QASystemVersion = '3.0.0'
            Status = 'SUCCESS'
          }
          
          $reportData | ConvertTo-Json -Depth 10 | Out-File -FilePath "qa-final-report.json" -Encoding UTF8
          
          Write-Host "‚úÖ PowerShell QA System validation completed successfully!"
          
      - name: Upload Final Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: powershell-qa-final-report
          path: |
            tools/powershell-qa/qa-final-report.json
            tools/powershell-qa/logs/
            tools/powershell-qa/reports/
          retention-days: 30