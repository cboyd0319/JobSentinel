name: Approve and Merge Dependabot PRs

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run (only list PRs, do not approve/merge)'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  pull-requests: write

jobs:
  approve-and-merge:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: List and process Dependabot PRs
        uses: actions/github-script@v7
        with:
          script: |
            const dryRun = ${{ inputs.dry_run }};
            
            // Get all open PRs authored by Dependabot
            const { data: pullRequests } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
            });
            
            const dependabotPRs = pullRequests.filter(pr => 
              pr.user.login === 'dependabot[bot]'
            );
            
            console.log(`Found ${dependabotPRs.length} Dependabot PRs`);
            
            if (dependabotPRs.length === 0) {
              console.log('No Dependabot PRs to process');
              return;
            }
            
            for (const pr of dependabotPRs) {
              console.log(`\nProcessing PR #${pr.number}: ${pr.title}`);
              console.log(`URL: ${pr.html_url}`);
              
              if (dryRun) {
                console.log('Dry run mode - would approve and merge this PR');
                continue;
              }
              
              try {
                // Check if PR is already approved
                const { data: reviews } = await github.rest.pulls.listReviews({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr.number,
                });
                
                const alreadyApproved = reviews.some(review => 
                  review.state === 'APPROVED'
                );
                
                if (!alreadyApproved) {
                  // Approve the PR
                  await github.rest.pulls.createReview({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: pr.number,
                    event: 'APPROVE',
                    body: '🤖 Auto-approved by workflow',
                  });
                  console.log(`✅ Approved PR #${pr.number}`);
                } else {
                  console.log(`ℹ️ PR #${pr.number} already approved`);
                }
                
                // Check CI status
                const { data: checks } = await github.rest.checks.listForRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: pr.head.sha,
                });
                
                const failedChecks = checks.check_runs.filter(check => 
                  check.conclusion === 'failure'
                );
                
                if (failedChecks.length > 0) {
                  console.log(`⚠️ PR #${pr.number} has failing checks, skipping merge`);
                  continue;
                }
                
                // Enable auto-merge
                try {
                  await github.graphql(`
                    mutation($prId: ID!) {
                      enablePullRequestAutoMerge(input: {
                        pullRequestId: $prId,
                        mergeMethod: SQUASH
                      }) {
                        pullRequest {
                          autoMergeRequest {
                            enabledAt
                          }
                        }
                      }
                    }
                  `, {
                    prId: pr.node_id
                  });
                  console.log(`✅ Enabled auto-merge for PR #${pr.number}`);
                } catch (error) {
                  console.log(`⚠️ Could not enable auto-merge for PR #${pr.number}: ${error.message}`);
                  
                  // Try direct merge if auto-merge fails and checks pass
                  const { data: combinedStatus } = await github.rest.repos.getCombinedStatusForRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: pr.head.sha,
                  });
                  
                  if (combinedStatus.state === 'success' || combinedStatus.state === 'pending') {
                    console.log(`Attempting direct merge for PR #${pr.number}`);
                    // Wait a moment for any pending checks
                    await new Promise(resolve => setTimeout(resolve, 5000));
                    
                    try {
                      await github.rest.pulls.merge({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        pull_number: pr.number,
                        merge_method: 'squash',
                      });
                      console.log(`✅ Merged PR #${pr.number}`);
                    } catch (mergeError) {
                      console.log(`⚠️ Could not merge PR #${pr.number}: ${mergeError.message}`);
                    }
                  }
                }
                
                // Add a comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  body: '🤖 This Dependabot PR has been auto-approved and will merge when CI passes.',
                });
                
              } catch (error) {
                console.error(`Error processing PR #${pr.number}:`, error.message);
              }
            }
            
            console.log('\n✨ Finished processing all Dependabot PRs');

      - name: Summary
        run: |
          echo "### Dependabot PR Processing Complete 🎉" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check the logs above for details on each PR processed." >> $GITHUB_STEP_SUMMARY
