name: Release

'on':
  push:
    tags:
      - 'v*.*.*'  # Semantic versioning tags only
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.1)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.extract_version.outputs.version }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Get full history for changelog

      - name: Extract version
        id: extract_version
        env:
          EVENT_NAME: ${{ github.event_name }}
          DISPATCH_VERSION: ${{ github.event.inputs.version }}
        run: |
          # nosemgrep: yaml.github-actions.security.run-shell-injection.run-shell-injection
          python3 <<'PY'
          import os
          import re

          event = os.getenv("EVENT_NAME")
          if event == "workflow_dispatch":
              version = os.getenv("DISPATCH_VERSION", "")
          else:
              ref = os.getenv("GITHUB_REF", "")
              version = ref.removeprefix("refs/tags/v")

          if not re.fullmatch(r"\d+\.\d+\.\d+", version or ""):
              raise SystemExit(f"Invalid version format: {version!r}")

          with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as fh:
              fh.write(f"version={version}\n")

          print(f"Version: {version}")
          PY

      - name: Update VERSION file
        env:
          VERSION: ${{ steps.extract_version.outputs.version }}
        run: |
          echo "$VERSION" > VERSION
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add VERSION
          git commit -m "chore: bump version to $VERSION" || exit 0

      - name: Generate changelog
        id: changelog
        env:
          VERSION: ${{ steps.extract_version.outputs.version }}
        run: |
          # Generate changelog from git commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || \
                     echo "")
          if [ -z "$LAST_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s" --reverse)
          else
            CHANGELOG=$(git log "${LAST_TAG}..HEAD" \
                        --pretty=format:"- %s" --reverse)
          fi

          # Save to file for upload
          cat > release_notes.md << EOF
          ## What's Changed

          $CHANGELOG

          ## Installation

          ### Windows (Recommended)
          \`\`\`powershell
          Set-ExecutionPolicy Bypass -Scope Process -Force;
          [System.Net.ServicePointManager]::SecurityProtocol = \
            [System.Net.ServicePointManager]::SecurityProtocol -bor 3072;
          irm ("https://raw.githubusercontent.com/cboyd0319/" +
               "job-private-scraper-filter/main/scripts/setup_windows.ps1") \
            | iex
          \`\`\`

          ### macOS/Linux
          \`\`\`bash
          git clone https://github.com/cboyd0319/job-private-scraper-filter.git
          cd job-private-scraper-filter
          git checkout v${VERSION}
          chmod +x scripts/setup.sh && ./scripts/setup.sh
          \`\`\`

          ## Security

          This release has been tested for security vulnerabilities.
          See [SECURITY.md](SECURITY.md) for security practices.

          **Full Changelog**:
          https://github.com/cboyd0319/job-private-scraper-filter/compare/${LAST_TAG}...\
          v${VERSION}
          EOF

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.extract_version.outputs.version }}
          name: "Job Scraper v${{ steps.extract_version.outputs.version }}"
          body_path: release_notes.md
          draft: false
          prerelease: false

  build-and-upload:
    name: Build and Upload Assets
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.10'

      - name: Create distribution package
        env:
          VERSION: ${{ needs.create-release.outputs.version }}
        run: |
          # Create a clean distribution
          mkdir -p dist/job-private-scraper-filter

          # Copy source files
          cp -r sources/ utils/ notify/ matchers/ templates/ docs/ scripts/ cloud/ dist/job-private-scraper-filter/
          cp -r config/ dist/job-private-scraper-filter/
          cp requirements.txt .env.example dist/job-private-scraper-filter/
          cp README.md LICENSE CHANGELOG.md CONTRIBUTING.md SECURITY.md CODE_OF_CONDUCT.md \
            dist/job-private-scraper-filter/

          # Create archive
          cd dist
          tar -czf "job-private-scraper-filter-v${VERSION}.tar.gz" \
            job-private-scraper-filter/
          zip -r "job-private-scraper-filter-v${VERSION}.zip" job-private-scraper-filter/

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ needs.create-release.outputs.version }}
        with:
          tag_name: v${{ needs.create-release.outputs.version }}
          files: |
            ./dist/job-private-scraper-filter-v${{ needs.create-release.outputs.version }}.tar.gz
            ./dist/job-private-scraper-filter-v${{ needs.create-release.outputs.version }}.zip
