name: PowerShell Quality

on:
  push:
    branches: [main, develop]
    paths:
      - '**.ps1'
      - '**.psm1'
      - '**.psd1'
      - 'PSScriptAnalyzerSettings.psd1'
  pull_request:
    branches: [main]
    paths:
      - '**.ps1'
      - '**.psm1'
      - '**.psd1'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  analysis:
    name: PSScriptAnalyzer
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install PSScriptAnalyzer
        shell: pwsh
        run: |
          Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser -Repository PSGallery
          Import-Module PSScriptAnalyzer

      - name: Run PSScriptAnalyzer
        id: analyzer
        shell: pwsh
        run: |
          $psFiles = Get-ChildItem -Path . -Include *.ps1,*.psm1 -Recurse |
            Select-Object -ExpandProperty FullName

          if (-not $psFiles) {
            Write-Host "No PowerShell files found for analysis." -ForegroundColor Yellow
            return
          }

          $results = Invoke-ScriptAnalyzer -Path $psFiles -Settings PSScriptAnalyzerSettings.psd1 -Severity Error,Warning

          if ($results) {
            Write-Host "PSScriptAnalyzer found issues:" -ForegroundColor Red
            $results | Format-Table -AutoSize File, Line, Severity, RuleName, Message
            exit 1
          }

          Write-Host "No PSScriptAnalyzer issues found!" -ForegroundColor Green

  syntax:
    name: Syntax Validation
    runs-on: windows-latest
    needs: analysis
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Parse scripts with PowerShell AST
        shell: pwsh
        run: |
          $psFiles = Get-ChildItem -Path . -Include *.ps1,*.psm1 -Recurse |
            Select-Object -ExpandProperty FullName

          if (-not $psFiles) {
            Write-Host "No PowerShell files found for syntax validation." -ForegroundColor Yellow
            return
          }

          $syntaxErrors = @()
          foreach ($file in $psFiles) {
              try {
                  $tokens = $null
                  $parseErrors = $null
                  [void][System.Management.Automation.Language.Parser]::ParseFile(
                      $file,
                      [ref]$tokens,
                      [ref]$parseErrors
                  )
                  if ($parseErrors) {
                      $syntaxErrors += $parseErrors
                      Write-Host "Syntax errors in $(Split-Path -Leaf $file):" -ForegroundColor Red
                      foreach ($error in $parseErrors) {
                          Write-Host "  Line $($error.Extent.StartLineNumber): $($error.Message)" -ForegroundColor Red
                      }
                  } else {
                      Write-Host "Syntax OK: $(Split-Path -Leaf $file)" -ForegroundColor Green
                  }
              } catch {
                  Write-Host "Failed to parse $($file): $($_.Exception.Message)" -ForegroundColor Red
                  $syntaxErrors += $_.Exception.Message
              }
          }

          if ($syntaxErrors.Count -gt 0) {
              Write-Host "Syntax test failed" -ForegroundColor Red
              exit 1
          }

          Write-Host "All PowerShell files have valid syntax" -ForegroundColor Green

  tests:
    name: Pester Tests
    runs-on: windows-latest
    needs: analysis
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Pester
        shell: pwsh
        run: |
          Install-Module -Name Pester -Force -Scope CurrentUser -MinimumVersion 5.5.0 -Repository PSGallery
          Import-Module Pester

      - name: Run Pester tests
        shell: pwsh
        run: |
          $config = New-PesterConfiguration
          $config.Run.Path = './tests'
          $config.Run.Exit = $true
          $config.CodeCoverage.Enabled = $true
          $config.TestResult.Enabled = $true
          $config.TestResult.OutputPath = 'test-results.xml'
          Invoke-Pester -Configuration $config

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results.xml

      - name: Publish test results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action/windows@v2
        with:
          files: test-results.xml