# PowerShell Quality Pipeline - GitHub Actions
# Zero-compromise CI/CD for Job Search Automation PowerShell components

name: 'PowerShell Quality Gate'

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'powershell/**'
      - '.github/workflows/powershell-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'powershell/**'
  workflow_dispatch:

env:
  POWERSHELL_TELEMETRY_OPTOUT: 1

jobs:
  lint:
    name: 'Code Quality & Linting'
    runs-on: windows-latest
    
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
        
      - name: 'Setup PowerShell 7'
        uses: azure/powershell@v1
        with:
          azPSVersion: 'latest'
          inlineScript: |
            Write-Host "PowerShell Version: $($PSVersionTable.PSVersion)"
            
      - name: 'Install Required Modules'
        shell: pwsh
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser
          Install-Module -Name Pester -MinimumVersion 5.5.0 -Force -Scope CurrentUser
          
      - name: 'Run PSScriptAnalyzer'
        shell: pwsh
        run: |
          $results = Invoke-ScriptAnalyzer -Path ./powershell -Settings ./powershell/PSScriptAnalyzerSettings.psd1 -Recurse
          
          if ($results) {
            $results | Format-Table -AutoSize
            $errorCount = ($results | Where-Object Severity -eq 'Error').Count
            $warningCount = ($results | Where-Object Severity -eq 'Warning').Count
            
            Write-Host "Analysis Results: $errorCount errors, $warningCount warnings" -ForegroundColor Yellow
            
            if ($errorCount -gt 0) {
              Write-Error "PSScriptAnalyzer found $errorCount error(s). Build failed."
              exit 1
            }
          } else {
            Write-Host "âœ… No PSScriptAnalyzer issues found!" -ForegroundColor Green
          }
          
      - name: 'Upload Lint Results'
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-results
          path: |
            ./powershell/logs/*.log
            ./powershell/logs/*.jsonl

  test:
    name: 'Unit & Integration Tests'
    runs-on: windows-latest
    needs: lint
    
    strategy:
      matrix:
        powershell-version: ['5.1', '7.4']
        
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
        
      - name: 'Setup PowerShell ${{ matrix.powershell-version }}'
        if: matrix.powershell-version == '7.4'
        uses: azure/powershell@v1
        with:
          azPSVersion: 'latest'
          inlineScript: Write-Host "PowerShell 7.4 Ready"
          
      - name: 'Install Test Dependencies'
        shell: pwsh
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Install-Module -Name Pester -MinimumVersion 5.5.0 -Force -Scope CurrentUser
          
      - name: 'Run Unit Tests'
        shell: pwsh
        run: |
          $pesterConfig = New-PesterConfiguration
          $pesterConfig.Run.Path = './powershell/tests'
          $pesterConfig.Filter.Tag = @('Unit')
          $pesterConfig.Output.Verbosity = 'Detailed'
          $pesterConfig.CodeCoverage.Enabled = $true
          $pesterConfig.CodeCoverage.Path = './powershell/modules/*.psm1'
          $pesterConfig.CodeCoverage.OutputFormat = 'JaCoCo'
          $pesterConfig.CodeCoverage.OutputPath = './coverage.xml'
          $pesterConfig.TestResult.Enabled = $true
          $pesterConfig.TestResult.OutputFormat = 'NUnitXml'
          $pesterConfig.TestResult.OutputPath = './test-results.xml'
          
          $result = Invoke-Pester -Configuration $pesterConfig
          
          if ($result.FailedCount -gt 0) {
            Write-Error "Unit tests failed: $($result.FailedCount) failures"
            exit 1
          }
          
      - name: 'Run Integration Tests'
        shell: pwsh
        run: |
          $pesterConfig = New-PesterConfiguration
          $pesterConfig.Run.Path = './powershell/tests'
          $pesterConfig.Filter.Tag = @('Integration')
          $pesterConfig.Output.Verbosity = 'Detailed'
          
          $result = Invoke-Pester -Configuration $pesterConfig
          
          if ($result.FailedCount -gt 0) {
            Write-Error "Integration tests failed: $($result.FailedCount) failures"
            exit 1
          }
          
      - name: 'Upload Test Results'
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-ps${{ matrix.powershell-version }}
          path: |
            ./test-results.xml
            ./coverage.xml
            ./powershell/logs/*.jsonl

  security:
    name: 'Security Validation'
    runs-on: windows-latest
    needs: test
    
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
        
      - name: 'Security Scan with PSScriptAnalyzer'
        shell: pwsh
        run: |
          Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser
          
          $securityRules = @(
            'PSAvoidUsingConvertToSecureStringWithPlainText',
            'PSAvoidUsingUsernameAndPasswordParams',
            'PSUsePSCredentialType',
            'PSAvoidUsingPlainTextForPassword'
          )
          
          $results = Invoke-ScriptAnalyzer -Path ./powershell -IncludeRule $securityRules -Recurse
          
          if ($results) {
            Write-Host "ðŸ”’ Security Issues Found:" -ForegroundColor Red
            $results | Format-Table -AutoSize
            exit 1
          } else {
            Write-Host "âœ… No security issues detected!" -ForegroundColor Green
          }
          
      - name: 'Check for Hardcoded Secrets'
        shell: pwsh
        run: |
          $secretPatterns = @(
            'password\s*=\s*["\'][^"\']+["\']',
            'api[_-]?key\s*=\s*["\'][^"\']+["\']',
            'secret\s*=\s*["\'][^"\']+["\']',
            'token\s*=\s*["\'][^"\']+["\']'
          )
          
          $issues = @()
          Get-ChildItem -Path ./powershell -Filter *.ps* -Recurse | ForEach-Object {
            $content = Get-Content -Path $_.FullName -Raw
            foreach ($pattern in $secretPatterns) {
              if ($content -match $pattern) {
                $issues += "Potential secret in $($_.Name): $($matches[0])"
              }
            }
          }
          
          if ($issues) {
            Write-Host "ðŸš¨ Potential secrets detected:" -ForegroundColor Red
            $issues | ForEach-Object { Write-Host "  $_" -ForegroundColor Yellow }
            exit 1
          } else {
            Write-Host "âœ… No hardcoded secrets detected!" -ForegroundColor Green
          }

  performance:
    name: 'Performance Benchmarks'
    runs-on: windows-latest
    needs: test
    
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
        
      - name: 'Setup Performance Testing'
        shell: pwsh
        run: |
          Install-Module -Name Pester -MinimumVersion 5.5.0 -Force -Scope CurrentUser
          
      - name: 'Run Performance Tests'
        shell: pwsh
        run: |
          $pesterConfig = New-PesterConfiguration
          $pesterConfig.Run.Path = './powershell/tests'
          $pesterConfig.Filter.Tag = @('Performance')
          $pesterConfig.Output.Verbosity = 'Detailed'
          
          $result = Invoke-Pester -Configuration $pesterConfig
          
          if ($result.FailedCount -gt 0) {
            Write-Warning "Performance tests failed - investigate potential regressions"
          } else {
            Write-Host "âœ… All performance benchmarks passed!" -ForegroundColor Green
          }

  package:
    name: 'Package & Validate'
    runs-on: windows-latest
    needs: [lint, test, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
        
      - name: 'Create Installation Package'
        shell: pwsh
        run: |
          $packageDir = './package'
          New-Item -ItemType Directory -Path $packageDir -Force
          
          # Copy PowerShell components
          Copy-Item -Path './powershell' -Destination "$packageDir/powershell" -Recurse -Force
          
          # Create package manifest
          $manifest = @{
            Name = 'JobSearchAutomation-PowerShell'
            Version = '2.0.0'
            BuildDate = Get-Date
            Commit = '${{ github.sha }}'
            Components = @('Core', 'Logging', 'Security', 'Installation')
          }
          
          $manifest | ConvertTo-Json | Out-File -FilePath "$packageDir/package-manifest.json" -Encoding UTF8
          
          Write-Host "âœ… Package created successfully!" -ForegroundColor Green
          
      - name: 'Validate Package Installation'
        shell: pwsh
        run: |
          # Test installation script
          $testInstallPath = Join-Path -Path $env:TEMP -ChildPath "JobSearchAutomation-Test-$(Get-Random)"
          
          & ./package/powershell/Install-JobSearchAutomation.ps1 -InstallPath $testInstallPath -Mode Silent -WhatIf
          
          Write-Host "âœ… Installation validation completed!" -ForegroundColor Green
          
      - name: 'Upload Package Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: powershell-package
          path: ./package/
          retention-days: 30

  deploy:
    name: 'Deploy to Staging'
    runs-on: windows-latest
    needs: package
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: 'Download Package'
        uses: actions/download-artifact@v4
        with:
          name: powershell-package
          path: ./package
          
      - name: 'Deploy to Staging Environment'
        shell: pwsh
        run: |
          Write-Host "ðŸš€ Deploying to staging environment..." -ForegroundColor Cyan
          
          # This would typically deploy to a staging environment
          # For now, just validate the package structure
          
          $packageManifest = Get-Content -Path './package/package-manifest.json' | ConvertFrom-Json
          Write-Host "Package: $($packageManifest.Name) v$($packageManifest.Version)" -ForegroundColor Green
          Write-Host "Build Date: $($packageManifest.BuildDate)" -ForegroundColor White
          Write-Host "Commit: $($packageManifest.Commit)" -ForegroundColor White
          
          Write-Host "âœ… Staging deployment completed!" -ForegroundColor Green

# Notification on failure
  notify-failure:
    name: 'Notify on Failure'
    runs-on: ubuntu-latest
    needs: [lint, test, security, performance]
    if: failure()
    
    steps:
      - name: 'Send Failure Notification'
        run: |
          echo "ðŸ’¥ PowerShell Quality Gate Failed!"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"
          # In a real environment, this would send notifications to Slack/Teams/email