[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "JobSentinel"
version = "0.9.0"
description = "The World's Best Job Search Automation with AI/ML and MCP Integration"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [{ name = "Chad Boyd" }]
dependencies = [
  "aiofiles>=25.1,<26",
  "aiohttp>=3.13,<4",
  "aiosqlite>=0.21,<0.22",  # SQLite async driver (default database)
  "beautifulsoup4>=4.14,<5",
  "cryptography>=46.0,<47",
  "fastapi>=0.119,<0.120",
  "Flask>=3.1,<4",
  "google-api-core>=2.26,<3",
  "google-auth>=2.41,<3",
  "google-cloud-scheduler>=2.16,<3",
  "google-cloud-storage>=3.4,<4",
  "httpx>=0.28,<0.29",
  "lxml>=6.0,<7",
  "playwright>=1.55,<2",
  "psutil>=7.1,<8",
  "pydantic>=2.12,<3",
  "python-dotenv>=1.1,<2",
  "requests>=2.32,<3",
  "rich>=14.2,<15",
  "sqlalchemy>=2.0,<2.1",
  "sqlmodel>=0.0.27,<0.0.28",
  "tenacity>=9.1,<10",
  "uvicorn[standard]>=0.37,<0.38",
]

[project.optional-dependencies]
windows = [
  "pywin32>=306; platform_system=='Windows'",  # Desktop shortcut creation
]
postgres = [
  "asyncpg>=0.29,<0.31",  # Async PostgreSQL driver
  "psycopg2-binary>=2.9,<3",  # Sync PostgreSQL driver
]
resume = [
  "pdfplumber>=0.11,<0.12",
  "python-docx>=1.2,<2",
  "spacy>=3.8,<4",
  "pdfminer.six>=20221105",
  "pytesseract>=0.3.10",
  "Pillow>=10.0.0",
  "python-Levenshtein>=0.21.0",
  "regex>=2023.0.0",
  "rapidfuzz>=3.0,<4",
  "textstat>=0.7.3,<0.8",
]
ml = [
  "sentence-transformers>=5.1,<6",
  "transformers>=4.57,<5",
  "torch>=2.8,<3",
  "scikit-learn>=1.7,<2",
  "vaderSentiment>=3.3,<4",
]
mcp = [
  "mcp>=1.17,<2",
  "httpx-sse>=0.4,<0.5",
  "jsonschema>=4.25,<5",
  "pydantic-settings>=2.11,<3",
]
llm = [
  "openai>=2.3,<3",
  "anthropic>=0.69,<0.70",
  "litellm>=1.78,<2",
]
dev = [
  "black>=25.9,<26",
  "pytest>=8.4,<9",
  "pytest-cov>=7.0,<8",
  "pytest-asyncio>=1.2,<2",
  "hypothesis>=6.141,<7",
  "ruff>=0.14,<0.15",
  "mypy>=1.18,<2",
  "types-requests",
  "types-python-dateutil",
  "bandit[toml]>=1.8,<2",
  "mutmut>=3.3,<4",
  # "pyguard",  # Disabled temporarily - has Python 3.11+ compatibility issues with setup.py
]

[project.scripts]
jsa = "jsa.cli:main"

[tool.setuptools]
package-dir = {"" = "deploy/common/app/src", "models" = "deploy/common/app/models", "sources" = "deploy/common/app/sources", "utils" = "deploy/common/app/utils"}
py-modules = [
  "database",
  "concurrent_database",
  "unified_database",
  "agent",
  "web_ui",
]

[tool.setuptools.packages.find]
where = ["deploy/common/app/src", "deploy/common/app"]
include = [
  "jsa*",
  "domains*",
  "matchers*",
  "models*",
  "notify*",
  "sources*",
  "utils*",
]

[tool.black]
line-length = 100
target-version = ["py311"]

[tool.ruff]
line-length = 100
target-version = "py311"
src = ["deploy/common/app/src"]

[tool.ruff.lint]
select = ["E", "F", "B", "I", "UP", "S"]
ignore = [
  "E501",  # long lines handled by formatter/editor
  "E402",  # allow module docstrings before imports and lazy test skipping patterns
  "F401",  # unused imports allowed during iterative refactors in legacy
  "F841",  # assigned-but-unused placeholders
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"deploy/common/tests/**" = ["S101", "E402", "I001"]
"deploy/common/app/src/jsa/db.py" = ["I001"]
"deploy/common/app/src/jsa/web/blueprints/skills.py" = ["I001"]
"deploy/common/app/src/jsa/web/blueprints/main.py" = ["I001"]
"deploy/common/app/src/jsa/cli.py" = ["I001"]
"deploy/common/app/src/jsa/setup_wizard.py" = ["S603", "S607"]  # subprocess with trusted input (setup wizard)
"deploy/common/app/src/jsa/preflight_check.py" = ["S603", "S110"]  # subprocess with trusted input, informational checks
"deploy/common/app/src/jsa/gui_launcher.py" = ["S603", "S606", "S607", "F821"]  # subprocess with trusted input (GUI launcher), lambda closure
"deploy/common/app/src/jsa/macos_precheck.py" = ["S607"]  # subprocess with trusted input (system checks)
"deploy/common/app/src/jsa/macos_shortcuts.py" = ["S604", "UP035"]  # shell aliases with trusted input
"deploy/common/app/src/jsa/fastapi_app/routers/*.py" = ["B904"]  # Intentional exception conversion to HTTPException

[tool.mypy]
python_version = "3.11"
strict = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
ignore_missing_imports = true
allow_untyped_defs = false
allow_untyped_calls = false
files = ["deploy/common/app/src/jsa"]
exclude = ["deploy/common/app/src/jsa/web/"]  # TODO: Fix Flask route type annotations

[[tool.mypy.overrides]]
module = ["utils.*"]
ignore_errors = true

[[tool.mypy.overrides]]
module = ["deploy.common.app.src.*"]
ignore_errors = true

[tool.pytest.ini_options]
testpaths = ["deploy/common/tests"]
addopts = "-q"
markers = [
  "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
  "windows_deployment: marks tests specific to Windows deployment",
]
filterwarnings = [
  # Third-party deprecations (Click 9.0 parser split_arg_string)
  "ignore:Importing 'parser.split_arg_string' is deprecated:DeprecationWarning:click",
  "ignore:Importing 'parser.split_arg_string' is deprecated:DeprecationWarning:weasel",
  "ignore:Importing 'parser.split_arg_string' is deprecated:DeprecationWarning:spacy",
  # Pydantic v1 typing deprecation noise on ForwardRef evaluation under Py3.13+
  "ignore:Failing to pass a value to the 'type_params' parameter of 'typing.ForwardRef._evaluate':DeprecationWarning:pydantic",
]

[tool.bandit]
targets = ["deploy/common/app/src/jsa", "deploy/common/app/src/domains"]
exclude_dirs = ["deploy/common/tests", ".venv", "build"]
skips = ["B101"]  # assert_used - acceptable in test code

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]

[tool.coverage.run]
source = ["deploy/common/app/src/jsa", "deploy/common/app/src/domains"]
omit = [
  "*/tests/*",
  "*/__pycache__/*",
  "*/migrations/*",
]

[tool.coverage.report]
precision = 2
fail_under = 85
show_missing = true
skip_covered = false
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "@(abc\\.)?abstractmethod",
]
