[tool.black]
line-length = 120
target-version = ['py312']
include = '\.pyi?$' 
extend-exclude = '''
/( 
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/ 
'''

[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["src", "utils", "sources", "notify", "matchers", "cloud"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "bs4.*",
    "playwright.*",
    "requests.*",
    "flask.*",
    "sqlmodel.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --tb=short"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]

[tool.coverage.run]
source = ["src", "utils", "sources", "notify", "matchers"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/.venv/*",
    "*/venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = [".venv", "tests"]
skips = ["B101", "B601"]  # Skip assert_used and shell_commands for our security scanner

[tool.flake8]
max-line-length = 120
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "build",
    "dist"
]
ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator
]
max-complexity = 10
per-file-ignores = [
    "__init__.py:F401",  # Allow unused imports in __init__.py
    "tests/*:S101",      # Allow assert in tests
]

[tool.semantic_release]
branch = "main"
changelog_file = "CHANGELOG.md"
commit_message = "chore(release): {version} [skip ci]"
version_toml = ["pyproject.toml:tool.semantic_release.version"]
build_command = "python -m build"
upload_to_pypi = false
upload_to_release = true
repository = "https://oauth2:${GITHUB_TOKEN}@github.com/${{ github.repository }}"

[tool.semantic_release.version]
# This will be updated by semantic-release
current = "0.2.0" # Placeholder, will be updated by semantic-release

[build-system]
requires = ["build>=0.5.1"]
build-backend = "setuptools.build_meta"