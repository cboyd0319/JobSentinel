```"GCP deployment summary and notification functions."\n\nimport json\nimport urllib.request\nfrom typing import Dict\n\nfrom cloud.utils import run_command\nfrom cloud.providers.gcp.utils import looks_like_placeholder\n\ndef verify_deployment(logger, job_name: str, region: str, project_id: str, scheduler_region: str, storage_bucket: str) -> None:\n    logger.info(\"Verifying deployment\")\n\n    verification_passed = True\n    checks = [\n        (\"Cloud Run Job\", lambda: run_command(\n            [\"gcloud\", \"run\", \"jobs\", \"describe\", job_name,\n             f\"--region={region}\", f\"--project={project_id}\"],\n            capture_output=True, check=False, logger=logger\n        ).returncode == 0),\n        (\"Cloud Scheduler\", lambda: run_command(\n            [\"gcloud\", \"scheduler\", \"jobs\", \"describe\", f\"{job_name}-schedule\",\n             f\"--location={scheduler_region}\"],\n            capture_output=True, check=False, logger=logger\n        ).returncode == 0),\n        (\"Storage Bucket\", lambda: run_command(\n            [\"gcloud\", \"storage\", \"buckets\", \"describe\", f\"gs://{storage_bucket}\",\n             f\"--project={project_id}\"],\n            capture_output=True, check=False, logger=logger\n        ).returncode == 0),\n    ]\n\n    for check_name, check_func in checks:\n        try:\n            if check_func():\n                logger.info(f\"✓ {check_name} verified\")\n            else:\n                logger.warning(f\"✗ {check_name} verification failed\")\n                verification_passed = False\n        except Exception as e:\n            logger.warning(f\"✗ {check_name} verification error: {e}\")\n            verification_passed = False\n\n    if verification_passed:\n        logger.info(\"All critical resources verified successfully\")\n    else:\n        logger.warning(\"Some resources may not have deployed correctly\")\n\ndef print_summary(logger, project_id: str, region: str, artifact_repo: str, job_name: str, schedule_frequency: str, storage_bucket: str, image_uri: str) -> None:\n    logger.info(\"Deployment Summary\")\n    logger.info(f\"Project ID: {project_id}\")\n    logger.info(f\"Region: {region}\")\n    logger.info(f\"Artifact Registry: {artifact_repo}\")\n    logger.info(f\"Cloud Run Job: {job_name}\")\n    logger.info(f\"Scheduler Job: {job_name}-schedule\")\n    logger.info(f\"Storage Bucket: gs://{storage_bucket}\")\n    logger.info(\n        \"Run an ad-hoc scrape with: \"\n        f\"gcloud run jobs execute {job_name} --region {region}\"\n    )\n\ndef send_slack_notification(logger, project_id: str, region: str, job_name: str, schedule_frequency: str, storage_bucket: str, image_uri: str, env_values: Dict[str, str]) -> None:\n    \"\"\"Send deployment summary to Slack webhook if configured.\"\"\"\n    webhook_url = env_values.get(\"SLACK_WEBHOOK_URL\")\n    if not webhook_url or looks_like_placeholder(webhook_url, \"\"):\n        logger.info(\"Slack webhook not configured, skipping notification\")\n        return\n\n    logger.info(\"Sending deployment summary to Slack\")\n\n    message = {\n        \"text\": \"GCP Job Scraper Deployment Complete\",\n        \"blocks\": [\n            {\n                \"type\": \"header\",\n                \"text\": {\n                    \"type\": \"plain_text\",\n                    \"text\": \"GCP Job Scraper Deployed Successfully\"\n                }\n            },\n            {\n                \"type\": \"section\",\n                \"fields\": [\n                    {\"type\": \"mrkdwn\", \"text\": f\"*Project ID:*\\n{project_id}\"},\n                    {\"type\": \"mrkdwn\", \"text\": f\"*Region:*\\n{region}\"},\n                    {\"type\": \"mrkdwn\", \"text\": f\"*Job:*\\n{job_name}\"},\n                    {\"type\": \"mrkdwn\", \"text\": f\"*Schedule:*\\n{schedule_frequency}\"},\n                ]\n            },\n            {\n                \"type\": \"section\",\n                \"text\": {\n                    \"type\": \"mrkdwn\",\n                    \"text\": f\"*Storage:* `gs://{storage_bucket}`\\n*Image:* `{image_uri}`\"\n                }\n            },\n            {\n                \"type\": \"section\",\n                \"text\": {\n                    \"type\": \"mrkdwn\",\n                    \"text\": f\"Execute manually:\\n```gcloud run jobs execute {job_name} --region {region}```\"\n                }\n            }\n        ]\n    }\n\n    try:\n        req = urllib.request.Request(\n            webhook_url,\n            data=json.dumps(message).encode('utf-8'),\n            headers={'Content-Type': 'application/json'},\n            method='POST'\n        )\n        with urllib.request.urlopen(req, timeout=10) as response:  # nosec B310\n            if response.status == 200:\n                logger.info(\"Slack notification sent successfully\")\n            else:\n                logger.warning(f\"Slack notification returned status {response.status}\")\n    except Exception as e:\n        logger.warning(f\"Failed to send Slack notification: {e}\")\n\n```