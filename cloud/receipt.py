"""Deployment receipt generator - creates terminal and markdown receipts."""

from datetime import datetime
from pathlib import Path

from rich.console import Console
from rich.panel import Panel

from cloud.style import RICH_COLORS, SYMBOL, WIDTH


def generate_receipt_content(
    project_id: str,
    region: str,
    service_url: str | None = None,
    artifact_digest: str | None = None,
    terraform_version: str = "1.10.3",
) -> dict[str, str]:
    """Generate receipt content for terminal and markdown output."""

    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S %Z")

    # Terminal receipt (Rich formatted)
    terminal_lines = [
        f"[{RICH_COLORS['accent']}]{SYMBOL['ok']} Deployment Complete[/]",
        "",
        f"[{RICH_COLORS['muted']}]Project:[/] {project_id}",
        f"[{RICH_COLORS['muted']}]Region:[/] {region}",
    ]

    if service_url:
        terminal_lines.append(f"[{RICH_COLORS['muted']}]Service URL:[/] {service_url}")

    if artifact_digest:
        terminal_lines.append(f"[{RICH_COLORS['muted']}]Artifact:[/] {artifact_digest[:20]}...")

    terminal_lines.extend([
        f"[{RICH_COLORS['muted']}]Terraform:[/] v{terraform_version}",
        f"[{RICH_COLORS['muted']}]Deployed:[/] {timestamp}",
        "",
        f"[{RICH_COLORS['primary']}]{SYMBOL['arrow']} Next Steps:[/]",
        f"  {SYMBOL['dot']} View logs: gcloud logging read",
        f"  {SYMBOL['dot']} Trigger job: gcloud run jobs execute job-scraper",
        f"  {SYMBOL['dot']} Teardown: ./scripts/teardown-cloud.sh",
    ])

    terminal_receipt = "\n".join(terminal_lines)

    # Markdown receipt
    markdown_lines = [
        "# Deployment Receipt",
        "",
        f"**{SYMBOL['ok']} Deployment completed successfully**",
        "",
        "## Details",
        "",
        f"- **Project:** `{project_id}`",
        f"- **Region:** `{region}`",
    ]

    if service_url:
        markdown_lines.append(f"- **Service URL:** {service_url}")

    if artifact_digest:
        markdown_lines.append(f"- **Artifact Digest:** `{artifact_digest}`")

    markdown_lines.extend([
        f"- **Terraform Version:** {terraform_version}",
        f"- **Deployed:** {timestamp}",
        "",
        "## Next Steps",
        "",
        "```bash",
        "# View logs",
        "gcloud logging read --project=" + project_id,
        "",
        "# Trigger job manually",
        "gcloud run jobs execute job-scraper --region=" + region,
        "",
        "# Teardown infrastructure",
        "./scripts/teardown-cloud.sh",
        "```",
        "",
        "---",
        "_Generated by Job Scraper Cloud Bootstrap_",
    ])

    markdown_receipt = "\n".join(markdown_lines)

    return {
        "terminal": terminal_receipt,
        "markdown": markdown_receipt,
    }


def print_receipt(
    console: Console,
    project_id: str,
    region: str,
    service_url: str | None = None,
    artifact_digest: str | None = None,
    terraform_version: str = "1.10.3",
) -> None:
    """Print formatted receipt to terminal."""

    content = generate_receipt_content(
        project_id=project_id,
        region=region,
        service_url=service_url,
        artifact_digest=artifact_digest,
        terraform_version=terraform_version,
    )

    console.print()
    console.print(Panel(
        content["terminal"],
        title="[bold]Deployment Receipt[/bold]",
        border_style=RICH_COLORS["primary"],
        width=WIDTH,
    ))
    console.print()


def save_receipt(
    project_id: str,
    region: str,
    output_path: Path | None = None,
    service_url: str | None = None,
    artifact_digest: str | None = None,
    terraform_version: str = "1.10.3",
) -> Path:
    """Save markdown receipt to file."""

    if output_path is None:
        output_path = Path.cwd() / "deployment-receipt.md"

    content = generate_receipt_content(
        project_id=project_id,
        region=region,
        service_url=service_url,
        artifact_digest=artifact_digest,
        terraform_version=terraform_version,
    )

    output_path.write_text(content["markdown"])
    return output_path
