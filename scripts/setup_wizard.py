#!/usr/bin/env python3
"""
Interactive setup wizard for the enhanced job scraper.
Includes resume analysis for personalized job matching.
"""

from utils.logging import get_logger, console\nfrom src.unified_database import init_unified_db\nfrom sources.job_scraper_base import GenericJobExtractor\nimport sys\nimport json\nfrom pathlib import Path\nfrom urllib.parse import urlparse, urlunparse\n\nfrom InquirerPy import prompt\nfrom InquirerPy.validator import EmptyInput, PathValidator, NumberValidator\n\n# Add project root to path\nsys.path.append(str(Path(__file__).parent.parent))\n\n\nlogger = get_logger(\"setup_wizard\")\n\n\nclass SetupWizard:\n    \"\"\"Interactive setup wizard for job scraper personalization.\"\"\"\n\n    def __init__(self):\n        self.extractor = GenericJobExtractor()\n        self.user_profile = {}\n        self.config_path = Path(\"config/user_profile.json\")\n\n    @staticmethod\n    def _sanitize_board_url(raw_url: str) -> str:\n        \"\"\"Validate and normalize a custom job board URL.\"\"\"\n        candidate = raw_url.strip()\n        if not candidate:\n            raise ValueError(\"empty URL\")\n\n        if \"://\" not in candidate:\n            candidate = f\"https://{candidate}\"\n\n        parsed = urlparse(candidate)\n\n        if parsed.scheme not in {\"http\", \"https\"}:\n            raise ValueError(f\"unsupported scheme: {parsed.scheme}\")\n\n        if not parsed.hostname:\n            raise ValueError(\"missing hostname\")\n\n        normalized = parsed._replace(\n            scheme=parsed.scheme.lower(),\n            netloc=(parsed.hostname or \"\").lower(),\n            fragment=\"\",\n            params=\"\",\n        )\n\n        return urlunparse(normalized)\n\n    def welcome(self):\n        \"\"\"Display welcome message and overview.\"\"\"\n        console.print(\"[bold blue]🚀 ENHANCED JOB SCRAPER SETUP WIZARD[/bold blue]\")\n        console.print(\"[blue]=\[/blue]\" * 50)\n        console.print(\"Welcome to your personalized job scraper!\")\n        console.print(\"\\nThis wizard will help you:\")\n        console.print(\"• [green]📄[/green] Analyze your resume for skills and preferences\")\n        console.print(\"• [green]🎯[/green] Set up personalized job matching\")\n        console.print(\"• [green]📍[/green] Configure location and remote work preferences\")\n        console.print(\"• [green]💰[/green] Set salary expectations and career goals\")\n        console.print(\"• [green]🔍[/green] Choose which job boards to monitor\")\n        console.print(\"\\n[bold green]Let\'s get started! 🎉[/bold green]\\n\")\n\n    def collect_basic_info(self):\n        \"\"\"Collect basic user information.\"\"\"\n        console.print(\"[bold blue]1️⃣ BASIC INFORMATION[/bold blue]\")\n        console.print(\"[blue]-\[/blue]\" * 25)\n\n        questions = [\n            {\n                \"type\": \"input\",\n                \"message\": \"📝 Your name:\",\n                \"validate\": EmptyInput(\"Name cannot be empty\"),\n                \"default\": self.user_profile.get(\'name\', \'\'),\n                \"name\": \"name\",\n            },\n            {\n                \"type\": \"input\",\n                \"message\": \"👔 Current job title:\",\n                \"validate\": EmptyInput(\"Job title cannot be empty\"),\n                \"default\": self.user_profile.get(\'current_title\', \'\'),\n                \"name\": \"current_title\",\n            },\n            {\n                \"type\": \"input\",\n                \"message\": \"📅 Years of experience:\",\n                \"validate\": NumberValidator(\"Please enter a valid number\"),\n                \"default\": str(self.user_profile.get(\'experience_years\', 0)),\n                \"name\": \"experience_years\",\n            },\n            {\n                \"type\": \"input\",\n                \"message\": \"📍 Current location (city, state):\",\n                \"validate\": EmptyInput(\"Location cannot be empty\"),\n                \"default\": self.user_profile.get(\'location\', \'\'),\n                \"name\": \"location\",\n            },\n            {\n                \"type\": \"list\",\n                \"message\": \"🌍 Work arrangement preferences:\",\n                \"choices\": [\n                    {\"name\": \"On-site only\", \"value\": \"On-site\"},\n                    {\"name\": \"Remote only\", \"value\": \"Remote\"},\n                    {\"name\": \"Hybrid (mix of on-site and remote)\", \"value\": \"Hybrid\"},\n                    {\"name\": \"Open to all arrangements\", \"value\": \"Any\"},\n                ],\n                \"default\": self.user_profile.get(\'work_arrangement_preference\', \'Any\'),\n                \"name\": \"work_arrangement_preference\",\n            },\n        ]\n        answers = prompt(questions=questions)\n        self.user_profile.update(answers)\n        console.print()\n\n    def analyze_resume(self):\n        \"\"\"Analyze user\'s resume for skills extraction.\"\"\"\n        console.print(\"[bold blue]2️⃣ RESUME ANALYSIS[/bold blue]\")\n        console.print(\"[blue]-\[/blue]\" * 20)\n\n        has_resume = prompt(\n            {\n                \"type\": \"confirm\",\n                \"message\": \"📄 Do you have a resume you\'d like to analyze?\",\n                \"default\": False,\n                \"name\": \"has_resume\",\n            }\n        )[\"has_resume\"]\n\n        if has_resume:\n            console.print(\"\\nYou can provide your resume in two ways:\")\n            console.print(\"1. Paste resume text directly\")\n            console.print(\"2. Provide path to resume file (PDF/TXT)\")\n\n            method = prompt(\n                {\n                    \"type\": \"list\",\n                    \"message\": \"Choose method:\",\n                    \"choices\": [{\"name\": \"Paste text\", \"value\": \"paste\"}, {\"name\": \"File path\", \"value\": \"file\"}],\n                    \"name\": \"method\",\n                }\n            )[\"method\"]\n\n            resume_text = \"\"\n\n            if method == \'paste\':\n                console.print(\"\\n[bold yellow]📝 Please paste your resume text below.[/bold yellow]\")\n                console.print(\"[bold yellow]When finished, type \'DONE\' on a new line and press Enter:[/bold yellow]\")\n\n                lines = []\n                while True:\n                    line = input()\n                    if line.strip().upper() == \'DONE\':\n                        break\n                    lines.append(line)\n                resume_text = \'\\n\'.join(lines)\n\n            elif method == \'file\':\n                file_path = prompt(\n                    {\n                        \"type\": \"input\",\n                        \"message\": \"📁 Enter path to resume file:\",\n                        \"validate\": PathValidator(is_file=True, message=\"Invalid file path\"),\n                        \"name\": \"file_path\",\n                    }\n                )[\"file_path\"]\n                try:\n                    if file_path.endswith(\'.pdf\'):\n                        console.print(\n                            \"[yellow]📄 PDF analysis requires additional setup. For now, please copy/paste the text.[/yellow]\")\n                        return self.analyze_resume()\n                    else:\n                        with open(file_path, \'r\', encoding=\'utf-8\') as f:\n                            resume_text = f.read()\n                except Exception as e:\n                    console.print(f\"[bold red]❌ Error reading file:[/bold red] {e}\")\n                    return self.analyze_resume()\n\n            if resume_text:\n                console.print(\"\\n[cyan]🔍 Analyzing your resume...[/cyan]\")\n                self._extract_skills_from_resume(resume_text)\n            else:\n                console.print(\"[yellow]⚠️ No resume text provided, skipping automatic analysis.[/yellow]\")\n                self._manual_skills_entry()\n        else:\n            console.print(\"[green]📝 No problem! Let\'s manually configure your skills and preferences.[/green]\")\n            self._manual_skills_entry()\n\n    def _extract_skills_from_resume(self, resume_text: str):\n        \"\"\"Extract skills from resume text.\"\"\"\n        try:\n            skills_data = self.extractor.extract_skills_from_description(\n                resume_text)\n\n            # Extract seniority from current title\n            current_title = self.user_profile.get(\'current_title\', \'\')\n            seniority = self.extractor.extract_seniority_from_title(\n                current_title)\n\n            self.user_profile[\'seniority_level\'] = seniority\n            self.user_profile[\'skills\'] = skills_data.get(\'technologies\', [])\n            self.user_profile[\'technical_skills\'] = [\n                skill for skill in skills_data.get(\'technologies\', [])\n                if any(tech in skill.lower() for tech in [\'python\', \'javascript\', \'sql\', \'aws\', \'react\'])\n            ]\n            self.user_profile[\'marketing_skills\'] = [\n                skill for skill in skills_data.get(\'technologies\', [])\n                if any(marketing in skill.lower() for marketing in [\'seo\', \'analytics\', \'ads\', \'marketing\'])\n            ]\n\n            console.print(\n                f\"[green]✅ Analysis complete! Found {len(self.user_profile[\'skills\'])} skills[/green]\")\n            console.print(f\"[cyan]📊 Detected seniority level: {seniority}[/cyan]\")\n\n            if self.user_profile[\'skills\']:\n                console.print(\"\\n[bold blue]🎯 Top skills identified:[/bold blue]\")\n                for skill in self.user_profile[\'skills\'][:10]:\n                    console.print(f\"   • [green]{skill}[/green]\")\n\n                if len(self.user_profile[\'skills\']) > 10:\n                    console.print(\n                        f\"   ... and {len(self.user_profile[\'skills\']) - 10} more\")\n\n                confirm_accuracy = prompt(\n                    {\n                        \"type\": \"confirm\",\n                        \"message\": \"✅ Does this look accurate?\",\n                        \"default\": True,\n                        \"name\": \"confirm_accuracy\",\n                    }\n                )[\"confirm_accuracy\"]\n                if not confirm_accuracy:\n                    self._manual_skills_entry()\n            else:\n                console.print(\"[yellow]⚠️ No skills detected automatically. Let\'s add them manually.[/yellow]\")\n                self._manual_skills_entry()\n\n        except Exception as e:\n            logger.error(f\"[bold red]Resume analysis failed:[/bold red] {e}\")\n            console.print(f\"[bold red]❌ Resume analysis failed:[/bold red] {e}\")\n            self._manual_skills_entry()\n\n    def _manual_skills_entry(self):\n        \"\"\"Allow manual entry of skills.\"\"\"\n        console.print(\"[bold blue]\\n📝 MANUAL SKILLS ENTRY[/bold blue]\")\n        console.print(\"Enter your key skills, separated by commas:\")\n        console.print(\"Example: Python, JavaScript, SEO, Google Analytics, Project Management\")\n\n        skills_input = prompt(\n            {\n                \"type\": \"input\",\n                \"message\": \"🎯 Your skills:\",\n                \"default\": \", \".join(self.user_profile.get(\'skills\', [])),\n                \"name\": \"skills_input\",\n            }\n        )[\"skills_input\"]\n        if skills_input:\n            manual_skills = [skill.strip()\n                             for skill in skills_input.split(\',\')]\n            self.user_profile[\'skills\'] = manual_skills\n            console.print(f\"[green]✅ Added {len(manual_skills)} skills[/green]\")\n\n    def configure_career_goals(self):\n        \"\"\"Configure career goals and salary expectations.\"\"\"\n        console.print(\"[bold blue]\\n3️⃣ CAREER GOALS & COMPENSATION[/bold blue]\")\n        console.print(\"[blue]-\[/blue]\" * 35)\n\n        # Career level aspirations\n        career_goal = prompt(\n            {\n                \"type\": \"list\",\n                \"message\": \"🎯 What type of roles are you targeting?\",\n                \"choices\": [\n                    {\"name\": \"Same level (lateral moves)\", \"value\": \"lateral\"},\n                    {\"name\": \"Next level up (promotions)\", \"value\": \"promotion\"},\n                    {\"name\": \"Leadership roles\", \"value\": \"leadership\"},\n                    {\"name\": \"Open to all levels\", \"value\": \"open\"},\n                ],\n                \"default\": self.user_profile.get(\'career_goal\', \'open\'),\n                \"name\": \"career_goal\",\n            }\n        )[\"career_goal\"]\n        self.user_profile[\'career_goal\'] = career_goal\n\n        # Salary expectations\n        salary_min = prompt(\n            {\n                \"type\": \"input\",\n                \"message\": \"💰 Minimum salary expectation (e.g., 80000, or leave blank to skip):\",\n                \"validate\": NumberValidator(\"Please enter a valid number or leave blank\"),\n                \"filter\": lambda val: int(val) if val else None,\n                \"default\": str(self.user_profile.get(\'salary_min\', \'\')),\n                \"name\": \"salary_min\",\n            }\n        )[\"salary_min\"]\n        salary_max = prompt(\n            {\n                \"type\": \"input\",\n                \"message\": \"💰 Maximum salary expectation (e.g., 120000, or leave blank to skip):\",\n                \"validate\": NumberValidator(\"Please enter a valid number or leave blank\"),\n                \"filter\": lambda val: int(val) if val else None,\n                \"default\": str(self.user_profile.get(\'salary_max\', \'\')),\n                \"name\": \"salary_max\",\n            }\n        )[\"salary_max\"]\n\n        if salary_min is not None:\n            self.user_profile[\'salary_min\'] = salary_min\n        if salary_max is not None:\n            self.user_profile[\'salary_max\'] = salary_max\n\n    def configure_job_boards(self):\n        \"\"\"Configure which job boards to monitor.\"\"\"\n        console.print(\"[bold blue]\\n4️⃣ JOB BOARD SELECTION[/bold blue]\")\n        console.print(\"[blue]-\[/blue]\" * 25)\n\n        console.print(\"📋 Which job boards would you like to monitor?\")\n        console.print(\"[green]✅ Greenhouse (automatic)[/green]\")\n        console.print(\"[green]✅ Microsoft Careers (automatic)[/green]\")\n        console.print(\"[green]✅ SpaceX Careers (automatic)[/green]\")\n        console.print(\"[green]✅ Workday sites (automatic)[/green]\")\n\n        # Company-specific boards\n        console.print(\"\\n[bold blue]🏢 Any specific companies you\'re interested in?[/bold blue]\")\n        console.print(\"Enter company career page URLs (one per line, or press Enter to finish):\")\n\n        custom_urls = self.user_profile.get(\'custom_job_boards\', [])\n        while True:\n            url = prompt(\n                {\n                    \"type\": \"input\",\n                    \"message\": f\"🔗 Company URL (leave blank to finish, current: {len(custom_urls)}):\",\n                    \"name\": \"url\",\n                }\n            )[\"url\"]\n            if not url:\n                break\n            try:\n                sanitized = self._sanitize_board_url(url)\n            except ValueError as exc:\n                console.print(f\"[bold red]⚠️ Invalid URL ({exc}). Please try again.[/bold red]\")\n                continue\n\n            if sanitized in custom_urls:\n                console.print(\"[yellow]⚠️ URL already added, skipping duplicate[/yellow]\")\n                continue\n\n            custom_urls.append(sanitized)\n            console.print(f\"[green]Added:[/green] {sanitized}\")\n\n        self.user_profile[\'custom_job_boards\'] = custom_urls\n\n        if custom_urls:\n            console.print(f\"[green]✅ Added {len(custom_urls)} custom job boards[/green]\")\n\n    def configure_notifications(self):\n        \"\"\"Configure notification preferences.\"\"\"\n        console.print(\"[bold blue]\\n5️⃣ NOTIFICATION PREFERENCES[/bold blue]\")\n        console.print(\"[blue]-\[/blue]\" * 30)\n\n        # Match threshold\n        threshold_choice = prompt(\n            {\n                \"type\": \"list\",\n                \"message\": \"🎯 What\'s the minimum match score for notifications?\",\n                \"choices\": [\n                    {\"name\": \"90%+ (only excellent matches)\", \"value\": 90},\n                    {\"name\": \"75%+ (good matches)\", \"value\": 75},\n                    {\"name\": \"60%+ (decent matches)\", \"value\": 60},\n                    {\"name\": \"50%+ (all potential matches)\", \"value\": 50},\n                ],\n                \"default\": self.user_profile.get(\'notification_threshold\', 75),\n                \"name\": \"notification_threshold\",\n            }\n        )[\"notification_threshold\"]\n        self.user_profile[\'notification_threshold\'] = threshold_choice\n\n        # Notification frequency\n        frequency_choice = prompt(\n            {\n                \"type\": \"list\",\n                \"message\": \"📬 How often should we check for new jobs?\",\n                \"choices\": [\n                    {\"name\": \"Real-time (as soon as found)\", \"value\": \"realtime\"},\n                    {\"name\": \"Daily digest\", \"value\": \"daily\"},\n                    {\"name\": \"Weekly summary\", \"value\": \"weekly\"},\n                ],\n                \"default\": self.user_profile.get(\'notification_frequency\', \'daily\'),\n                \"name\": \"notification_frequency\",\n            }\n        )[\"notification_frequency\"]\n        self.user_profile[\'notification_frequency\'] = frequency_choice\n\n    def save_configuration(self):\n        \"\"\"Save user configuration to file.\"\"\"\n        console.print(\"[bold blue]\\n💾 SAVING CONFIGURATION[/bold blue]\")\n        console.print(\"[blue]-\[/blue]\" * 25)\n\n        # Create config directory if it doesn\'t exist\n        self.config_path.parent.mkdir(exist_ok=True)\n\n        try:\n            # Save to JSON file\n            with open(self.config_path, \'w\') as f:\n                json.dump(self.user_profile, f, indent=2)\n\n            # Initialize database with user profile\n            init_unified_db()\n\n            console.print(f\"[green]✅ Configuration saved to {self.config_path}[/green]\")\n            console.print(\"[green]✅ Database initialized[/green]\")\n\n        except Exception as e:\n            logger.error(f\"[bold red]Failed to save configuration:[/bold red] {e}\")\n            console.print(f\"[bold red]❌ Failed to save configuration:[/bold red] {e}\")\n\n    def display_summary(self):\n        \"\"\"Display setup summary.\"\"\"\n        console.print(\"[bold blue]\\n🎉 SETUP COMPLETE![/bold blue]\")\n        console.print(\"[blue]=\[/blue]\" * 25)\n\n        console.print(f\"👤 Name: [green]{self.user_profile.get(\'name\', \'Not specified\')}[/green]\")\n        console.print(\n            f\"👔 Title: [green]{self.user_profile.get(\'current_title\', \'Not specified\')}[/green]\")\n        console.print(\n            f\"⭐ Level: [green]{self.user_profile.get(\'seniority_level\', \'Not specified\')}[/green]\")\n        console.print(\n            f\"📍 Location: [green]{self.user_profile.get(\'location\', \'Not specified\')}[/green]\")\n        console.print(\n            f\"🌍 Work Style: [green]{self.user_profile.get(\'work_arrangement_preference\', \'Any\')}[/green]\")\n\n        skills = self.user_profile.get(\'skills\', [])\n        if skills:\n            console.print(f\"🎯 Skills: [green]{len(skills)} identified[/green]\")\n\n        salary_min = self.user_profile.get(\'salary_min\')\n        salary_max = self.user_profile.get(\'salary_max\')\n        if salary_min or salary_max:\n            console.print(\"💰 Salary preferences captured (values hidden for privacy)\")\n\n        custom_boards = self.user_profile.get(\'custom_job_boards\', [])\n        if custom_boards:\n            console.print(f\"🏢 Custom Boards: [green]{len(custom_boards)} companies[/green]\")\n\n        console.print(\n            f\"📬 Notifications: [green]{self.user_profile.get(\'notification_threshold\', 75)}% threshold[/green]\")\n\n        console.print(\"\\n[bold green]🚀 Your personalized job scraper is ready![/bold green]\")\n        console.print(\"\\nNext steps:\")\n        console.print(\"• Run job scraper to find matching opportunities\")\n        console.print(\"• Check config/user_profile.json to modify preferences\")\n        console.print(\"• View docs/ folder for advanced configuration\")\n\n    def run(self):\n        \"\"\"Run the complete setup wizard.\"\"\"\n        try:\n            self.welcome()\n            self.collect_basic_info()\n            self.analyze_resume()\n            self.configure_career_goals()\n            self.configure_job_boards()\n            self.configure_notifications()\n            self.save_configuration()\n            self.display_summary()\n\n        except KeyboardInterrupt:\n            console.print(\"\\n\\n[bold red]❌ Setup cancelled by user[/bold red]\")\n            sys.exit(1)\n        except Exception as e:\n            logger.error(f\"[bold red]Setup wizard failed:[/bold red] {e}\")\n            console.print(f\"\\n[bold red]❌ Setup failed:[/bold red] {e}\")\n            sys.exit(1)\n\n\ndef main():\n    \"\"\"Main entry point.\"\"\"\n    wizard = SetupWizard()\n    wizard.run()\n\n\nif __name__ == \"__main__\":\n    main()\n
