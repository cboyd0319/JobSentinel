# Quality Pipeline Commands and CI Configuration

# Lint/Static Analysis
.PHONY: lint
lint:
	pwsh -Command "Invoke-ScriptAnalyzer -Path deploy/windows/*.ps1 -Settings PSScriptAnalyzerSettings.psd1 -Severity Error,Warning"

# Type checking (PowerShell equivalent)
.PHONY: type-check
type-check:
	pwsh -Command "Get-ChildItem deploy/windows/*.ps1 | ForEach-Object { Test-ScriptFileInfo -Path $_.FullName -ErrorAction Continue }"

# Run all tests
.PHONY: test
test:
	pwsh -Command "Invoke-Pester -Configuration @{ Run = @{ Path = 'tests' }; Output = @{ Verbosity = 'Detailed' } }"

# Code coverage
.PHONY: coverage
coverage:
	pwsh -Command "Invoke-Pester -Configuration @{ Run = @{ Path = 'tests' }; CodeCoverage = @{ Enabled = $true; Path = 'deploy/windows/*.ps1'; Threshold = 90; OutputFormat = 'JaCoCo'; OutputPath = 'coverage.xml' } }"

# Security scan
.PHONY: security
security:
	pwsh -Command "Invoke-ScriptAnalyzer -Path deploy/windows/*.ps1 -Severity Error -IncludeRule PSAvoid*"

# Full quality check
.PHONY: quality
quality: lint type-check test coverage security

# CI/CD Pipeline for GitHub Actions
---
name: Windows Installer Quality Pipeline

on:
  push:
    paths:
      - 'deploy/windows/**'
      - 'tests/**'
  pull_request:
    paths:
      - 'deploy/windows/**'
      - 'tests/**'

jobs:
  quality-check:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install PowerShell modules
      run: |
        Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser
        Install-Module -Name Pester -MinimumVersion 5.0 -Force -Scope CurrentUser

    - name: Lint PowerShell scripts
      run: |
        $results = Invoke-ScriptAnalyzer -Path deploy/windows/*.ps1 -Settings PSScriptAnalyzerSettings.psd1 -Severity Error,Warning
        if ($results) {
          $results | Format-Table -AutoSize
          Write-Error "PSScriptAnalyzer found issues"
          exit 1
        }

    - name: Run Pester tests
      run: |
        $config = New-PesterConfiguration
        $config.Run.Path = 'tests'
        $config.TestResult.Enabled = $true
        $config.TestResult.OutputFormat = 'NUnitXml'
        $config.TestResult.OutputPath = 'test-results.xml'
        $config.CodeCoverage.Enabled = $true
        $config.CodeCoverage.Path = 'deploy/windows/*.ps1'
        $config.CodeCoverage.Threshold = 90
        $config.CodeCoverage.OutputFormat = 'JaCoCo'
        $config.CodeCoverage.OutputPath = 'coverage.xml'
        $config.Output.Verbosity = 'Detailed'

        $result = Invoke-Pester -Configuration $config

        if ($result.Result -ne 'Passed') {
          Write-Error "Tests failed"
          exit 1
        }

        if ($result.CodeCoverage.NumberOfCommandsAnalyzed -gt 0) {
          $coverage = ($result.CodeCoverage.NumberOfCommandsExecuted / $result.CodeCoverage.NumberOfCommandsAnalyzed) * 100
          Write-Host "Code coverage: $($coverage.ToString('F2'))%"
          if ($coverage -lt 90) {
            Write-Error "Code coverage below threshold (90%)"
            exit 1
          }
        }

    - name: Security scan
      run: |
        $securityResults = Invoke-ScriptAnalyzer -Path deploy/windows/*.ps1 -Severity Error -IncludeRule PSAvoid*
        if ($securityResults) {
          $securityResults | Format-Table -AutoSize
          Write-Error "Security issues found"
          exit 1
        }

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          test-results.xml
          coverage.xml

    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Pester Tests
        path: test-results.xml
        reporter: java-junit

  integration-test:
    runs-on: windows-latest
    needs: quality-check

    steps:
    - uses: actions/checkout@v4

    - name: Test installer in clean environment
      run: |
        # Test the installer in WhatIf mode
        .\deploy\windows\Install-JobSearchAutomation.ps1 -WhatIf -InstallPath "C:\TestInstall"

    - name: Test bootstrap script
      run: |
        # Test bootstrap functionality
        .\deploy\windows\Invoke-Bootstrap.ps1 -WhatIf

  mutation-testing:
    runs-on: windows-latest
    needs: quality-check
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v4

    - name: Install mutation testing tools
      run: |
        # Install PSMutation or similar tool when available
        # For now, we'll run enhanced property-based tests
        Install-Module -Name Pester -MinimumVersion 5.0 -Force -Scope CurrentUser

    - name: Run property-based tests
      run: |
        # Run tests with randomized inputs to catch edge cases
        $config = New-PesterConfiguration
        $config.Run.Path = 'tests'
        $config.Filter.Tag = 'Property'
        $config.Output.Verbosity = 'Detailed'

        Invoke-Pester -Configuration $config