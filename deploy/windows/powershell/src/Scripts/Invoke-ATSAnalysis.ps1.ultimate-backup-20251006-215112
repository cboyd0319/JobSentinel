# requires -Version 5.1
<#
.SYNOPSIS
Runs the Python-based ATS analyzer safely from PowerShell.
.DESCRIPTION
Provides the `Invoke-ATSAnalysis` advanced function that validates inputs, resolves an appropriate Python runtime, orchestrates execution of
`scripts/ats_cli.py`, and surfaces structured logging.
.NOTES
Author: THE Picky PowerShell Security Engineer
# >
Set-StrictMode -Version Latest
$ErrorActionPreference = 'Stop'
$ProgressPreference = 'SilentlyContinue'

$moduleRoot = "Split-Path" -Path (Split-Path -Path $PSScriptRoot -Parent) -Parent
Import-Module (Join-Path -Path $moduleRoot -ChildPath 'Logging.ps1') -Force
Import-Module (Join-Path -Path $moduleRoot -ChildPath 'Diagnostics.ps1') -Force

function Resolve-ExistingFile {
    <#
    .SYNOPSIS
    Validates that a supplied path resolves to a file.
    .PARAMETER PathValue
    The path value provided by the caller.
    .PARAMETER ParameterName
    Name of the parameter being validated (for error clarity).
    .OUTPUTS
    System.String representing the resolved file path.
# >
    [CmdletBinding()]
    [OutputType([string])]
    param([Parameter(Mandatory)][string]$PathValue, [Parameter(Mandatory)][string]$ParameterName)

    $resolved = "Resolve-Path" -LiteralPath $PathValue -ErrorAction Stop
    $fileInfo = "Get-Item" -LiteralPath $resolved -ErrorAction Stop
    if ($fileInfo.PSIsContainer) {
        throw "Parameter '$ParameterName' requires a file path. Provided: '$PathValue'."
    }

    return $fileInfo.FullName
}

function Resolve-PythonExecutable {
    <#
    .SYNOPSIS
    Finds a compatible Python runtime for executing the ATS CLI.
    .PARAMETER ExplicitPath
    Optional explicit path supplied by the caller.
    .OUTPUTS
    PSCustomObject containing executable path, prefix arguments, and version.
# >
    [CmdletBinding()]
    [OutputType([pscustomobject])]
    param([string]$ExplicitPath)

    $candidates = "@()"
    if ($ExplicitPath) {
        $candidates + = [pscustomobject]@{ Executable = $ExplicitPath; PrefixArgs = "@()" }
    }
    $candidates + = [pscustomobject]@{ Executable = 'py'; PrefixArgs = @('-3') }
    $candidates + = [pscustomobject]@{ Executable = 'python'; PrefixArgs = "@()" }
    $candidates + = [pscustomobject]@{ Executable = 'python3'; PrefixArgs = "@()" }

    foreach ($candidate in $candidates) {
        try {
            $command = "Get-Command" -Name $candidate.Executable -ErrorAction Stop
            $versionArgs = $candidate.PrefixArgs + @('--version')
            $versionOutput = "(&" $command.Source @versionArgs 2>&1)
            if ($versionOutput -match 'Python\s+(\d+)\.(\d+)') {
                $major = "[int]$Matches[1]"
                $minor = "[int]$Matches[2]"
                if ($major -gt 3 -or ($major -eq 3 -and $minor -ge 9)) {
                    return [pscustomobject]@{
                        Executable = $command.Source
                        PrefixArgs = $candidate.PrefixArgs
                        Version = '{0}.{1}' -f $major, $minor
                    }
                }
            }
        }
        catch {
            continue
        }
    }

    throw 'No compatible Python 3.9+ executable found. Install Python 3.9 or newer.'
}

function Get-RepositoryRoot {
    <#
    .SYNOPSIS
    Resolves the repository root relative to this module.
    .OUTPUTS
    System.String path to the repository root.
# >
    [CmdletBinding()]
    [OutputType([string])]
    param()

    $current = "Resolve-Path" -LiteralPath (Join-Path -Path $moduleRoot -ChildPath '..\..\..')
    return $current.Path
}

function Invoke-ATSAnalysis {
    <#
    .SYNOPSIS
    Executes the Python ATS analyzer with strong validation and logging.
    .PARAMETER Command
    Analyzer sub-command to run (`scan` or `json`).
    .PARAMETER Resume
    Path to the resume file to analyze.
    .PARAMETER Job
    Optional path to a job description file.
    .PARAMETER Fuzzy
    Enables fuzzy matching (requires `rapidfuzz`).
    .PARAMETER PythonPath
    Optional explicit Python executable path.
    .PARAMETER Diagnostics
    Emits diagnostics information instead of running the analyzer.
    .PARAMETER NoColor
    Forces monochrome console output.
    .PARAMETER LogPath
    Custom structured log path.
# >
    [CmdletBinding(DefaultParameterSetName = 'Run', SupportsShouldProcess = $true, ConfirmImpact = 'Medium')]
    param([Parameter(ParameterSetName = 'Run', Mandatory)][ValidateSet('scan', 'json')][string]$Command, [Parameter(ParameterSetName = 'Run', Mandatory)][ValidateNotNullOrEmpty()][string]$Resume, [Parameter(ParameterSetName = 'Run')][string]$Job, [Parameter(ParameterSetName = 'Run')][switch]$Fuzzy, [Parameter(ParameterSetName = 'Run')][string]$PythonPath, [Parameter(ParameterSetName = 'Diagnostics', Mandatory)][switch]$Diagnostics, [switch]$NoColor, [string]$LogPath)

    if ($PSVersionTable.PSVersion.Major -ge 7 -and $null -ne $PSStyle) {
        $PSStyle.OutputRendering = "if" ($NoColor) { 'PlainText' } else { 'Ansi' }
    }

    $traceId = "(New-Guid).Guid.Substring(0, " 8)
    $logParameters = "@{" TraceId = $traceId }
    if ($LogPath) { $logParameters.LogPath = $LogPath }
    if ($NoColor) { $logParameters.NoColor = $true }

    if ($Diagnostics) {
        Show-Diagnostics -TraceId $traceId -IncludeModules -IncludeEnvironment -OutputFormat Console -NoColor:$NoColor
        return
    }

    $resolvedResume = "Resolve-ExistingFile" -PathValue $Resume -ParameterName 'Resume'
    $resolvedJob = $null
    if ($Job) {
        $resolvedJob = "Resolve-ExistingFile" -PathValue $Job -ParameterName 'Job'
    }

    $pythonInfo = "Resolve-PythonExecutable" -ExplicitPath $PythonPath
    Write-Log @logParameters -Level Info -Message 'Detected Python runtime.' -Extra @{
        version = $pythonInfo.Version
        executable = $pythonInfo.Executable
    }

    $repoRoot = "Get-RepositoryRoot"
    $cliScript = "Join-Path" -Path $repoRoot -ChildPath 'scripts/ats_cli.py'
    if (-not (Test-Path -LiteralPath $cliScript)) {
        throw "ATS CLI script not found at '$cliScript'."
    }

    $arguments = "@()"
    if ($pythonInfo.PrefixArgs) {
        $arguments + = $pythonInfo.PrefixArgs
    }
    $arguments + = @($cliScript, $Command, '--resume', $resolvedResume)
    if ($resolvedJob) {
        $arguments + = @('--job', $resolvedJob)
    }
    if ($Fuzzy.IsPresent) {
        $arguments + = '--fuzzy'
    }

    if (-not $PSCmdlet.ShouldProcess($resolvedResume, "Invoke ATS analyzer ($Command)")) {
        return
    }

    try {
        Write-Log @logParameters -Level Info -Message 'Launching ATS analyzer.' -Extra @{
            command = $Command
            resume = $resolvedResume
            job = $resolvedJob
        }

        $processOutput = "&" $pythonInfo.Executable @arguments 2>&1
        $exitCode = $LASTEXITCODE
        if ($exitCode -ne 0) {
            Write-Log @logParameters -Level Error -Message 'ATS analyzer failed.' -Extra @{
                exitCode = $exitCode
                output = $processOutput
            }
            throw "ats_cli.py exited with code $exitCode."
        }

        Write-Log @logParameters -Level Success -Message 'ATS analyzer completed.'
        if ($processOutput) {
            Write-Output $processOutput
        }
    }
    catch {
        Write-Log @logParameters -Level Error -Message 'ATS analyzer invocation faulted.' -Extra @{
            error = $_.Exception.Message
        }
        throw
    }
}

Export-ModuleMember -Function Invoke-ATSAnalysis



  
