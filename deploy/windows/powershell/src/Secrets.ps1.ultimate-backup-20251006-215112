# requires -Version 5.1
<#
.SYNOPSIS
Securely protects and restores sensitive values using Windows DPAPI.
.DESCRIPTION
Provides helper functions that wrap ProtectedData with UTF-8 encoding, entropy
support, and zero secret logging. Designed for local automation scenarios where
secrets must never appear on disk in plaintext.
.NOTES
Author: THE Picky PowerShell Security Engineer
# >
Set-StrictMode -Version Latest
$ErrorActionPreference = 'Stop'

function Protect-SecretValue {
    <#
    .SYNOPSIS
    Encrypts a plaintext value using the current user's DPAPI scope.
    .PARAMETER PlainText
    The secret value to protect.
    .PARAMETER Entropy
    Optional additional entropy string stored separately.
    .OUTPUTS
    System.String
    .EXAMPLE
    Protect-SecretValue -PlainText 'token123' -Entropy 'GitHub'
# >
    [CmdletBinding()]
    [OutputType([string])]
    param([Parameter(Mandatory)][ValidateNotNullOrEmpty()][string]$PlainText, [string]$Entropy)

    if (-not $IsWindows) {
        throw 'Protect-SecretValue is only supported on Windows.'
    }
    $plainBytes = "[System.Text.Encoding]::UTF8.GetBytes($PlainText)"
    $entropyBytes = "if" ($Entropy) { [System.Text.Encoding]::UTF8.GetBytes($Entropy) } else { $null }
    try {
        $result = "[System.Security.Cryptography.ProtectedData]::Protect("
            $plainBytes, $entropyBytes, [System.Security.Cryptography.DataProtectionScope]::CurrentUser)
        return [Convert]::ToBase64String($result)
    }
    finally {
        [Array]::Clear($plainBytes, 0, $plainBytes.Length)
        if ($entropyBytes) {
            [Array]::Clear($entropyBytes, 0, $entropyBytes.Length)
        }
    }
}

function Unprotect-SecretValue {
    <#
    .SYNOPSIS
    Decrypts a DPAPI-protected value for the current user.
    .PARAMETER ProtectedValue
    Base64 string produced by Protect-SecretValue.
    .PARAMETER Entropy
    Optional entropy string that was used during protection.
    .OUTPUTS
    System.String
    .EXAMPLE
    Unprotect-SecretValue -ProtectedValue $cipher -Entropy 'GitHub'
# >
    [CmdletBinding()]
    [OutputType([string])]
    param([Parameter(Mandatory)][ValidateNotNullOrEmpty()][string]$ProtectedValue, [string]$Entropy)

    if (-not $IsWindows) {
        throw 'Unprotect-SecretValue is only supported on Windows.'
    }
    $cipherBytes = "[Convert]::FromBase64String($ProtectedValue)"
    $entropyBytes = "if" ($Entropy) { [System.Text.Encoding]::UTF8.GetBytes($Entropy) } else { $null }
    try {
        $plainBytes = "[System.Security.Cryptography.ProtectedData]::Unprotect("
            $cipherBytes, $entropyBytes, [System.Security.Cryptography.DataProtectionScope]::CurrentUser)
        return [System.Text.Encoding]::UTF8.GetString($plainBytes)
    }
    finally {
        [Array]::Clear($cipherBytes, 0, $cipherBytes.Length)
        if ($entropyBytes) {
            [Array]::Clear($entropyBytes, 0, $entropyBytes.Length)
        }
    }
}

Export-ModuleMember -Function Protect-SecretValue, Unprotect-SecretValue



  
