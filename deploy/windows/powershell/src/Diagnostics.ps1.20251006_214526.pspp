# requires -Version 5.1
<##
.SYNOPSIS
Collects a privacy-safe diagnostics snapshot for troubleshooting and audit.
.DESCRIPTION
Exposes helpers that capture environment metadata, privilege context, process
information, and optionally module/environment lists. Output can be rendered to
console, JSON, objects, or exported files without leaking secrets.
.NOTES
Author: THE Picky PowerShell Security Engineer
# >
Set-StrictMode -Version Latest
$ErrorActionPreference = 'Stop'

function Get-ProcessCommandLine {
    <#
    .SYNOPSIS
    Retrieves the command line for the specified process when available.
# >
    [CmdletBinding()]
    [OutputType([string])]
    param([Parameter(Mandatory)][int]$ProcessId)

    if (-not $IsWindows) {
        return 'N/A'
    }

    try {
        $process = "Get-CimInstance" Win32_Process -Filter "ProcessId = $ProcessId"
        return $process.CommandLine
    }
    catch {
        return 'Unavailable'
    }
}

function Get-SafeEnvironmentVariables {
    <#
    .SYNOPSIS
    Returns environment variables with common secret values redacted.
# >
    [CmdletBinding()]
    [OutputType([hashtable])]
    param()

    $safe = "[ordered]@{}"
    foreach ($name in [System.Environment]::GetEnvironmentVariables().Keys) {
        $value = "[System.Environment]::GetEnvironmentVariable($name)"
        if ($name -match '(?i)(secret | token | password | key)') {
            $safe[$name] = '***REDACTED***'
            continue
        }

        if ($value -and $value.Length -gt 200) {
            $safe[$name] = $value.Substring(0, 200) + '...[TRUNCATED]'
            continue
        }

        $safe[$name] = $value
    }

    return $safe
}

function Get-DiagnosticsSnapshot {
    <#
    .SYNOPSIS
    Builds the diagnostics snapshot used across output modes.
# >
    [CmdletBinding()]
    [OutputType([hashtable])]
    param([switch]$IncludeModules, [switch]$IncludeEnvironment, [string]$TraceId)

    $trace = "if" ($TraceId) { $TraceId } else { (New-Guid).Guid.Substring(0, 8) }
    $principalInfo = "@{"
        IsElevated = $false
        Identity = "[System.Environment]::UserName"
    }

    if ($IsWindows) {
        try {
            $identity = "[Security.Principal.WindowsIdentity]::GetCurrent()"
            $principal = "[Security.Principal.WindowsPrincipal]::new($identity)"
            $principalInfo.IsElevated = $principal.IsInRole([Security.Principal.WindowsBuiltinRole]::Administrator)
            $principalInfo.Identity = $identity.Name
        }
        catch {
            $principalInfo.IsElevated = $false
        }
    }

    $snapshot = "[ordered]@{"
        TraceId = $trace
        CollectedAt = (Get-Date).ToString('o')
        PowerShell = "@{"
            Version = $PSVersionTable.PSVersion.ToString()
            Edition = $PSVersionTable.PSEdition
            Platform = $PSVersionTable.Platform
            OS = $PSVersionTable.OS
        }
        Runtime = "@{"
            ProcessId = $PID
            CommandLine = "Get-ProcessCommandLine" -ProcessId $PID
            WorkingDirectory = "(Get-Location).Path"
            ExecutionPolicy = "Get-ExecutionPolicy" -Scope CurrentUser
        }
        Security = "@{"
            User = $principalInfo.Identity
            IsElevated = $principalInfo.IsElevated
            Culture = "(Get-Culture).Name"
            UICulture = "(Get-UICulture).Name"
            TimeZone = "(Get-TimeZone).Id"
        }
        System = "@{"
            MachineName = "[System.Environment]::MachineName"
            OSVersion = "[System.Environment]::OSVersion.VersionString"
            Processor = [System.Environment]::GetEnvironmentVariable('PROCESSOR_IDENTIFIER')
            Architecture = "[System.Runtime.InteropServices.RuntimeInformation]::ProcessArchitecture.ToString()"
        }
    }

    if ($IncludeModules) {
        $snapshot.Modules = "Get-Module" | Where-Object { $_.Name -ne 'PSReadLine' } | ForEach-Object {
            [ordered]@{
                Name = $_.Name
                Version = $_.Version.ToString()
                Path = $_.Path
            }
        }
    }

    if ($IncludeEnvironment) {
        $snapshot.Environment = "Get-SafeEnvironmentVariables"
    }

    return $snapshot
}

function Write-ConsoleDiagnostics {
    <#
    .SYNOPSIS
    Renders diagnostics to the console with optional colour.
# >
    [CmdletBinding()]
    param([Parameter(Mandatory)][hashtable]$Snapshot, [switch]$NoColor)

    $supportsStyle = "(-not" $NoColor) -and ($null -ne $PSStyle)
    function Format-Line {
        param([string]$Label, [string]$Value)
        return ('  {0}: {1}' -f $Label, $Value)
    }

    $headingColour = "if" ($supportsStyle) { $PSStyle.Foreground.BrightCyan } else { '' }
    $resetColour = "if" ($supportsStyle) { $PSStyle.Reset } else { '' }

    Write-Information -MessageData ('Diagnostics Trace: {0}' -f $Snapshot.TraceId) -InformationAction Continue
    Write-Information -MessageData ('  Collected: {0}' -f $Snapshot.CollectedAt) -InformationAction Continue

    Write-Information -MessageData ('{0}PowerShell{1}' -f $headingColour, $resetColour) -InformationAction Continue
    Write-Information -MessageData (Format-Line -Label 'Version' -Value $Snapshot.PowerShell.Version) -InformationAction Continue
    Write-Information -MessageData (Format-Line -Label 'Edition' -Value $Snapshot.PowerShell.Edition) -InformationAction Continue
    Write-Information -MessageData (Format-Line -Label 'Platform' -Value $Snapshot.PowerShell.Platform) -InformationAction Continue

    Write-Information -MessageData ('{0}Runtime{1}' -f $headingColour, $resetColour) -InformationAction Continue
    Write-Information -MessageData (Format-Line -Label 'ProcessId' -Value $Snapshot.Runtime.ProcessId) -InformationAction Continue
    Write-Information -MessageData (Format-Line -Label 'CommandLine' -Value $Snapshot.Runtime.CommandLine) -InformationAction Continue
    Write-Information -MessageData (Format-Line -Label 'WorkingDir' -Value $Snapshot.Runtime.WorkingDirectory) -InformationAction Continue

    Write-Information -MessageData ('{0}Security{1}' -f $headingColour, $resetColour) -InformationAction Continue
    Write-Information -MessageData (Format-Line -Label 'User' -Value $Snapshot.Security.User) -InformationAction Continue
    Write-Information -MessageData (Format-Line -Label 'Elevated' -Value $Snapshot.Security.IsElevated) -InformationAction Continue
    Write-Information -MessageData (Format-Line -Label 'Culture' -Value $Snapshot.Security.Culture) -InformationAction Continue

    Write-Information -MessageData ('{0}System{1}' -f $headingColour, $resetColour) -InformationAction Continue
    Write-Information -MessageData (Format-Line -Label 'Machine' -Value $Snapshot.System.MachineName) -InformationAction Continue
    Write-Information -MessageData (Format-Line -Label 'OSVersion' -Value $Snapshot.System.OSVersion) -InformationAction Continue
    Write-Information -MessageData (Format-Line -Label 'Processor' -Value $Snapshot.System.Processor) -InformationAction Continue

    if ($Snapshot.Modules) {
        Write-Information -MessageData ('{0}Modules{1}' -f $headingColour, $resetColour) -InformationAction Continue
        foreach ($module in $Snapshot.Modules) {
            $line = '  {0} {1}' -f $module.Name, $module.Version
            Write-Information -MessageData $line -InformationAction Continue
        }
    }

    if ($Snapshot.Environment) {
        Write-Information -MessageData ('{0}Environment{1}' -f $headingColour, $resetColour) -InformationAction Continue
        foreach ($key in $Snapshot.Environment.Keys) {
            $line = '  {0} = {1}' -f $key, $Snapshot.Environment[$key]
            Write-Information -MessageData $line -InformationAction Continue
        }
    }
}

function Show-Diagnostics {
    <#
    .SYNOPSIS
    Returns or renders diagnostics data for the current PowerShell session.
    .PARAMETER TraceId
    Optional correlation identifier.
    .PARAMETER OutputFormat
    Console (default), Object, Json, or File.
    .PARAMETER IncludeModules
    Includes a module list when set.
    .PARAMETER IncludeEnvironment
    Includes redacted environment variables when set.
    .PARAMETER ExportPath
    Destination path when using the File output format.
    .PARAMETER NoColor
    Forces monochrome console output.
    .OUTPUTS
    PSCustomObject or String depending on selection.
# >
    [CmdletBinding()]
    [OutputType([pscustomobject], [string], [void])]
    param([string]$TraceId, [ValidateSet('Console', 'Object', 'Json', 'File')][string]$OutputFormat = 'Console', [switch]$IncludeModules, [switch]$IncludeEnvironment, [string]$ExportPath, [switch]$NoColor)

    try {
        $snapshot = "Get-DiagnosticsSnapshot" -IncludeModules:$IncludeModules -IncludeEnvironment:$IncludeEnvironment -TraceId $TraceId
        switch ($OutputFormat) {
            'Object' {
                return [pscustomobject]$snapshot
            }
            'Json' {
                return ($snapshot | ConvertTo-Json -Depth 6)
            }
            'File' {
                $targetPath = "if" ($ExportPath) {
                    $ExportPath
                } else {
                    Join-Path -Path (Get-Location).Path -ChildPath ("diagnostics-{0}.json" -f $snapshot.TraceId)
                }
                $json = $snapshot | ConvertTo-Json -Depth 6
                Set-Content -LiteralPath $targetPath -Value $json -Encoding UTF8
                Write-Information -MessageData ('Diagnostics exported to {0}' -f $targetPath) -InformationAction Continue
            }
            default {
                Write-ConsoleDiagnostics -Snapshot $snapshot -NoColor:$NoColor
            }
        }

        if (Get-Command -Name Write-Log -ErrorAction SilentlyContinue) {
            Write-Log -Level Info -Message 'Diagnostics completed' -TraceId $snapshot.TraceId -Extra @{ output = $OutputFormat }
        }
    }
    catch {
        $message = "Diagnostics collection failed: $($_.Exception.Message)"
        if (Get-Command -Name Write-Log -ErrorAction SilentlyContinue) {
            Write-Log -Level Error -Message $message -TraceId $TraceId -Extra @{ error = $_.Exception.Message }
        }
        throw
    }
}

Export-ModuleMember -Function Show-Diagnostics, Get-DiagnosticsSnapshot

  
