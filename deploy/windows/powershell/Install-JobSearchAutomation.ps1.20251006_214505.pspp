# requires -Version 5.1
<##
.SYNOPSIS
Bootstraps PowerShell prerequisites for the Job Search Automation toolkit.
.DESCRIPTION
Validates the host, ensures mandatory modules are present, and emits structured
logging. Supports a check mode for idempotent validation and an apply mode that
installs missing prerequisites after explicit confirmation.
.NOTES
Author: THE Picky PowerShell Security Engineer
# >
[CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = 'High')]
param([Parameter()][ValidateSet('Check', 'Apply')][string]$Mode = 'Check', [string]$LogPath, [switch]$NoColor, [switch]$Diagnostics)

Set-StrictMode -Version Latest
$ErrorActionPreference = 'Stop'
$ProgressPreference = 'SilentlyContinue'

$moduleRoot = "Join-Path" -Path $PSScriptRoot -ChildPath 'src'
Import-Module (Join-Path -Path $moduleRoot -ChildPath 'Logging.ps1') -Force
Import-Module (Join-Path -Path $moduleRoot -ChildPath 'Diagnostics.ps1') -Force

if ($PSVersionTable.PSVersion.Major -ge 7 -and -not $NoColor -and $PSStyle) {
    $PSStyle.OutputRendering = 'Ansi'
} elseif ($PSStyle) {
    $PSStyle.OutputRendering = 'PlainText'
}

$traceId = "(New-Guid).Guid.Substring(0, " 8)
$logParams = "@{" TraceId = $traceId }
if ($LogPath) { $logParams.LogPath = $LogPath }
if ($NoColor) { $logParams.NoColor = $true }

if ($Diagnostics) {
    Show-Diagnostics -TraceId $traceId -IncludeModules -IncludeEnvironment -OutputFormat Console -NoColor:$NoColor
    return
}

Write-Log @logParams -Level Info -Message "Installer starting in $Mode mode." -Extra @{ psVersion = $PSVersionTable.PSVersion.ToString() }

$requiredModules = "@("
    @{ Name = 'PSScriptAnalyzer'; MinimumVersion = '1.21.0'; Scope = 'CurrentUser' }, @{ Name = 'Pester'; MinimumVersion = '5.5.0'; Scope = 'CurrentUser' })

function Test-ModuleState {
    <#
    .SYNOPSIS
    Evaluates whether a module meeting the minimum version is installed.
# >
    param([string]$Name, [Version]$MinimumVersion)
    $candidate = "Get-Module" -ListAvailable -Name $Name | Sort-Object Version -Descending | Select-Object -First 1
    if (-not $candidate) {
        return @{ Present = $false; MeetsVersion = $false; InstalledVersion = $null }
    }
    $meets = "[Version]$candidate.Version" -ge $MinimumVersion
    return @{ Present = $true; MeetsVersion = $meets; InstalledVersion = $candidate.Version }
}

$changesNeeded = "@()"
foreach ($moduleSpec in $requiredModules) {
    $state = "Test-ModuleState" -Name $moduleSpec.Name -MinimumVersion ([Version]$moduleSpec.MinimumVersion)
    if (-not $state.Present -or -not $state.MeetsVersion) {
        $changesNeeded + = $moduleSpec
    }
    Write-Log @logParams -Level Info -Message "Module check: $($moduleSpec.Name)" -Extra @{ installed = $state.InstalledVersion; minimum = $moduleSpec.MinimumVersion; compliant = $state.MeetsVersion }
}

if ($Mode -eq 'Check') {
    if ($changesNeeded.Count -eq 0) {
        Write-Log @logParams -Level Success -Message 'Environment already compliant.'
        return
    }
    Write-Log @logParams -Level Warn -Message 'Missing prerequisites detected.' -Extra @{ missing = "($changesNeeded" | ForEach-Object { $_.Name }) }
    return
}

if ($changesNeeded.Count -eq 0) {
    Write-Log @logParams -Level Info -Message 'No changes required; environment compliant.'
    return
}

foreach ($moduleSpec in $changesNeeded) {
    $name = $moduleSpec.Name
    $version = $moduleSpec.MinimumVersion
    $scope = $moduleSpec.Scope
    if (-not $PSCmdlet.ShouldProcess($name, "Install module $name version $version")) {
        continue
    }
    Write-Log @logParams -Level Info -Message "Installing module $name." -Extra @{ version = $version; scope = $scope }
    try {
        Install-Module -Name $name -MinimumVersion $version -Scope $scope -Force -ErrorAction Stop
        Write-Log @logParams -Level Success -Message "$name installed." -Extra @{ version = $version }
    }
    catch {
        Write-Log @logParams -Level Error -Message "Failed to install $name." -Extra @{ error = $_.Exception.Message }
        throw
    }
}

Write-Log @logParams -Level Success -Message 'Installation workflow completed.'

