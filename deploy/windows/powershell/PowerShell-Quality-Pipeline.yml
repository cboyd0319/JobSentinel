# PowerShell-Quality-Pipeline.yml
# Production-grade CI/CD pipeline for PowerShell indentation remediation

name: PowerShell Quality Gate
on:
  push:
    branches: [ main, develop ]
    paths: 
      - '**/*.ps1'
      - '**/*.psm1'
      - '**/*.psd1'
  pull_request:
    branches: [ main ]
    paths:
      - '**/*.ps1'
      - '**/*.psm1'
      - '**/*.psd1'

env:
  POWERSHELL_TELEMETRY_OPTOUT: 1
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  static-analysis:
    name: Static Code Analysis
    runs-on: windows-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup PowerShell Environment
      shell: pwsh
      run: |
        Write-Host "Setting up PowerShell environment..."
        $PSVersionTable | Format-Table
        
        # Install required modules
        $modules = @(
          @{ Name = 'PSScriptAnalyzer'; Version = '1.21.0' }
          @{ Name = 'Pester'; Version = '5.5.0' }
        )
        
        foreach ($module in $modules) {
          Write-Host "Installing $($module.Name) $($module.Version)..."
          Install-Module -Name $module.Name -MinimumVersion $module.Version -Force -Scope CurrentUser -AllowClobber
        }
    
    - name: Validate Indentation Consistency
      shell: pwsh
      run: |
        Write-Host "Running indentation consistency validation..."
        
        $scriptPath = ".\deploy\windows\powershell\Invoke-PowerShellIndentationRemediation.ps1"
        if (Test-Path $scriptPath) {
          & $scriptPath -RootPath "." -Mode Check -Force -NoColor
          
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Indentation issues found. Run with -Mode Apply to fix."
            exit 1
          }
        } else {
          Write-Warning "Indentation remediation script not found, using PSScriptAnalyzer directly"
          
          $issues = Invoke-ScriptAnalyzer -Path . -Recurse -IncludeRule PSUseConsistentIndentation -Severity Error
          if ($issues.Count -gt 0) {
            Write-Error "Found $($issues.Count) indentation consistency issues"
            $issues | Format-Table -AutoSize
            exit 1
          }
        }
    
    - name: Comprehensive PSScriptAnalyzer Scan
      shell: pwsh
      run: |
        Write-Host "Running comprehensive PowerShell analysis..."
        
        $settingsPath = ".\deploy\windows\powershell\PSScriptAnalyzerSettings.psd1"
        $analysisParams = @{
          Path = "."
          Recurse = $true
          Severity = @('Error', 'Warning')
          ExcludeRule = @('PSUseShouldProcessForStateChangingFunctions')  # Exclude if needed
        }
        
        if (Test-Path $settingsPath) {
          $analysisParams.Settings = $settingsPath
        }
        
        $issues = Invoke-ScriptAnalyzer @analysisParams
        
        if ($issues.Count -gt 0) {
          Write-Host "Found $($issues.Count) issues:" -ForegroundColor Yellow
          
          # Group by severity
          $errorIssues = $issues | Where-Object { $_.Severity -eq 'Error' }
          $warningIssues = $issues | Where-Object { $_.Severity -eq 'Warning' }
          
          if ($errorIssues.Count -gt 0) {
            Write-Host "`nERRORS ($($errorIssues.Count)):" -ForegroundColor Red
            $errorIssues | Format-Table File, Line, RuleName, Message -AutoSize
          }
          
          if ($warningIssues.Count -gt 0) {
            Write-Host "`nWARNINGS ($($warningIssues.Count)):" -ForegroundColor Yellow
            $warningIssues | Format-Table File, Line, RuleName, Message -AutoSize
          }
          
          # Fail on errors
          if ($errorIssues.Count -gt 0) {
            Write-Error "PSScriptAnalyzer found $($errorIssues.Count) error(s)"
            exit 1
          }
        } else {
          Write-Host "✅ No PSScriptAnalyzer issues found!" -ForegroundColor Green
        }
    
    - name: Upload Analysis Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: powershell-analysis-results
        path: |
          logs/*.jsonl
          **/*.log
        retention-days: 30

  unit-tests:
    name: Unit Tests
    runs-on: windows-latest
    needs: static-analysis
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Setup PowerShell Test Environment
      shell: pwsh
      run: |
        Write-Host "Setting up test environment..."
        
        # Install test dependencies
        Install-Module -Name Pester -MinimumVersion 5.5.0 -Force -Scope CurrentUser
        Install-Module -Name PSScriptAnalyzer -MinimumVersion 1.21.0 -Force -Scope CurrentUser
        
        # Verify installation
        Get-Module -ListAvailable Pester, PSScriptAnalyzer | Format-Table Name, Version
    
    - name: Run Pester Tests
      shell: pwsh
      run: |
        Write-Host "Running Pester tests..."
        
        $testPath = ".\deploy\windows\powershell\tests"
        if (-not (Test-Path $testPath)) {
          Write-Warning "Test directory not found: $testPath"
          exit 0
        }
        
        $config = New-PesterConfiguration
        $config.Run.Path = $testPath
        $config.Run.PassThru = $true
        $config.Run.Exit = $true
        $config.CodeCoverage.Enabled = $true
        $config.CodeCoverage.Path = ".\deploy\windows\powershell\*.ps1"
        $config.CodeCoverage.OutputFormat = 'JaCoCo'
        $config.CodeCoverage.OutputPath = 'coverage.xml'
        $config.TestResult.Enabled = $true
        $config.TestResult.OutputFormat = 'NUnitXml'
        $config.TestResult.OutputPath = 'testresults.xml'
        $config.Output.Verbosity = 'Detailed'
        
        $result = Invoke-Pester -Configuration $config
        
        Write-Host "Test Results:" -ForegroundColor Cyan
        Write-Host "  Total: $($result.TotalCount)" -ForegroundColor White
        Write-Host "  Passed: $($result.PassedCount)" -ForegroundColor Green
        Write-Host "  Failed: $($result.FailedCount)" -ForegroundColor Red
        Write-Host "  Skipped: $($result.SkippedCount)" -ForegroundColor Yellow
        
        if ($result.FailedCount -gt 0) {
          Write-Error "Some tests failed"
          exit 1
        }
    
    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          testresults.xml
          coverage.xml
        retention-days: 30
    
    # Optional: Publish test results to GitHub
    - name: Publish Test Results
      if: always()
      uses: dorny/test-reporter@v1
      with:
        name: PowerShell Tests
        path: testresults.xml
        reporter: java-junit

  integration-tests:
    name: Integration Tests
    runs-on: windows-latest
    needs: [static-analysis, unit-tests]
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Setup Integration Test Environment
      shell: pwsh
      run: |
        Write-Host "Setting up integration test environment..."
        Install-Module -Name PSScriptAnalyzer -MinimumVersion 1.21.0 -Force -Scope CurrentUser
    
    - name: Test Indentation Remediation End-to-End
      shell: pwsh
      run: |
        Write-Host "Running end-to-end indentation remediation test..."
        
        # Create test workspace
        $testDir = ".\test-workspace"
        New-Item -ItemType Directory -Path $testDir -Force | Out-Null
        
        # Create test file with bad indentation
        $badContent = @'
        function Test-BadIndentation {
        param($Name)
        if ($Name) {
        Write-Host "Hello $Name"
        }
        }
        '@
        
        Set-Content -Path "$testDir\test.ps1" -Value $badContent
        
        # Run remediation script
        $scriptPath = ".\deploy\windows\powershell\Invoke-PowerShellIndentationRemediation.ps1"
        if (Test-Path $scriptPath) {
          Write-Host "Testing Check mode..."
          & $scriptPath -RootPath $testDir -Mode Check -Force
          
          Write-Host "Testing Apply mode..."
          & $scriptPath -RootPath $testDir -Mode Apply -Force
          
          # Verify fix
          $fixedContent = Get-Content -Path "$testDir\test.ps1" -Raw
          $issues = Invoke-ScriptAnalyzer -Path "$testDir\test.ps1" -IncludeRule PSUseConsistentIndentation
          
          if ($issues.Count -gt 0) {
            Write-Error "Indentation issues still present after remediation"
            exit 1
          }
          
          Write-Host "✅ Integration test passed!" -ForegroundColor Green
        } else {
          Write-Warning "Remediation script not found, skipping integration test"
        }
        
        # Cleanup
        Remove-Item -Path $testDir -Recurse -Force -ErrorAction SilentlyContinue

  performance-validation:
    name: Performance Validation
    runs-on: windows-latest
    needs: integration-tests
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Performance Benchmark
      shell: pwsh
      timeout-minutes: 10
      run: |
        Write-Host "Running performance validation..."
        Install-Module -Name PSScriptAnalyzer -MinimumVersion 1.21.0 -Force -Scope CurrentUser
        
        # Create large test dataset
        $testDir = ".\perf-test"
        New-Item -ItemType Directory -Path $testDir -Force | Out-Null
        
        $sampleContent = @'
        function Test-Performance {
            [CmdletBinding()]
            param(
                [Parameter(Mandatory)]
                [string]$Name,
                [int]$Count = 10
            )
            
            for ($i = 1; $i -le $Count; $i++) {
                Write-Host "Processing $Name - $i"
                Start-Sleep -Milliseconds 10
            }
        }
        '@
        
        # Create 50 test files
        for ($i = 1; $i -le 50; $i++) {
          $content = $sampleContent -replace 'Test-Performance', "Test-Performance$i"
          Set-Content -Path "$testDir\test$i.ps1" -Value $content
        }
        
        # Measure performance
        $scriptPath = ".\deploy\windows\powershell\Invoke-PowerShellIndentationRemediation.ps1"
        if (Test-Path $scriptPath) {
          $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()
          
          & $scriptPath -RootPath $testDir -Mode Check -Force
          
          $stopwatch.Stop()
          $duration = $stopwatch.Elapsed
          
          Write-Host "Performance Results:" -ForegroundColor Cyan
          Write-Host "  Files: 50" -ForegroundColor White
          Write-Host "  Duration: $($duration.ToString('mm\:ss\.fff'))" -ForegroundColor White
          Write-Host "  Average per file: $([Math]::Round($duration.TotalMilliseconds / 50, 2))ms" -ForegroundColor White
          
          # Performance threshold: should process 50 files in under 30 seconds
          if ($duration.TotalSeconds -gt 30) {
            Write-Error "Performance regression detected: took $($duration.TotalSeconds) seconds"
            exit 1
          }
          
          Write-Host "✅ Performance validation passed!" -ForegroundColor Green
        }
        
        # Cleanup
        Remove-Item -Path $testDir -Recurse -Force -ErrorAction SilentlyContinue

  security-scan:
    name: Security Scan
    runs-on: windows-latest
    needs: static-analysis
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: PowerShell Security Scan
      shell: pwsh
      run: |
        Write-Host "Running security-focused analysis..."
        Install-Module -Name PSScriptAnalyzer -MinimumVersion 1.21.0 -Force -Scope CurrentUser
        
        # Security-focused rules
        $securityRules = @(
          'PSAvoidUsingPlainTextForPassword',
          'PSAvoidUsingConvertToSecureStringWithPlainText',
          'PSUsePSCredentialType',
          'PSAvoidUsingInvokeExpression',
          'PSAvoidGlobalVars',
          'PSUseDeclaredVarsMoreThanAssignments'
        )
        
        $securityIssues = Invoke-ScriptAnalyzer -Path . -Recurse -IncludeRule $securityRules -Severity @('Error', 'Warning')
        
        if ($securityIssues.Count -gt 0) {
          Write-Host "Security Issues Found:" -ForegroundColor Red
          $securityIssues | Format-Table File, Line, RuleName, Message -AutoSize
          
          # Count critical security issues
          $criticalIssues = $securityIssues | Where-Object { 
            $_.RuleName -in @(
              'PSAvoidUsingPlainTextForPassword', 
              'PSAvoidUsingConvertToSecureStringWithPlainText',
              'PSAvoidUsingInvokeExpression'
            )
          }
          
          if ($criticalIssues.Count -gt 0) {
            Write-Error "Critical security issues found: $($criticalIssues.Count)"
            exit 1
          }
        } else {
          Write-Host "✅ No security issues found!" -ForegroundColor Green
        }

  quality-gate:
    name: Quality Gate Summary
    runs-on: windows-latest
    needs: [static-analysis, unit-tests, integration-tests, security-scan]
    if: always()
    
    steps:
    - name: Quality Gate Results
      shell: pwsh
      run: |
        Write-Host "Quality Gate Summary" -ForegroundColor Cyan
        Write-Host "===================" -ForegroundColor Cyan
        
        $staticAnalysis = "${{ needs.static-analysis.result }}"
        $unitTests = "${{ needs.unit-tests.result }}"
        $integrationTests = "${{ needs.integration-tests.result }}"
        $securityScan = "${{ needs.security-scan.result }}"
        
        Write-Host "Static Analysis: $staticAnalysis" -ForegroundColor $(if($staticAnalysis -eq 'success'){'Green'}else{'Red'})
        Write-Host "Unit Tests: $unitTests" -ForegroundColor $(if($unitTests -eq 'success'){'Green'}else{'Red'})
        Write-Host "Integration Tests: $integrationTests" -ForegroundColor $(if($integrationTests -eq 'success'){'Green'}else{'Red'})
        Write-Host "Security Scan: $securityScan" -ForegroundColor $(if($securityScan -eq 'success'){'Green'}else{'Red'})
        
        $allPassed = @($staticAnalysis, $unitTests, $integrationTests, $securityScan) -eq 'success'
        
        if ($allPassed.Count -eq 4) {
          Write-Host "`n✅ All quality gates passed!" -ForegroundColor Green
          exit 0
        } else {
          Write-Host "`n❌ Quality gate failures detected" -ForegroundColor Red
          exit 1
        }